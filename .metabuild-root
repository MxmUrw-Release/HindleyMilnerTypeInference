globalConfig:
  buildRelDir: _build/metabuild
  binRelDir: _build/bin

haskellStackProjects: []
  # - haskellStackBin_RelFile: metabuild
  #   haskellStackSource_RelDir: Buildsystem/MetaBuilder
  #   haskellStackAutobuild: false
  #   installGlobal: true

agdaProjects:
  - sourceRelDir: .
    sourceOverwrite_RelDir: UnsafeOverwrite
    mainRelFile: Verification/Application/Main.agda
    agdaBin_RelFile: hata
    haskellStackTemplateRelDir: Runtime
    agdaAutobuild: false
    libraryDefinitions_Filename: hata.agda-lib


agdaPublishProjects:
  - projectName: testvtc
    autobuild: false
    fastbuild: true
    source_RelDir: Verification
    libraryDefinitions_Filename: hata.agda-lib
    agdaPublishDocumentDescription:
      documentTitle: "Verified Type Checking (Test)"
      documentAuthor: "Maxim Urschumzew"
      documentType: SCReport
      documentDate: ""
      documentFilesAndHeadings:
      - = Main
      - Core/Data/List/Dependent/Variant/Unary/Definition.agda
      - Core/Data/List/Dependent/Variant/Binary/Definition.agda
      # - = Cats
      # - Core/Category/Std/Category/Definition.agda
      # - Core/Data/List/Dependent/Variant/Binary/Definition.agda

  - projectName: vtc
    autobuild: false
    fastbuild: true
    source_RelDir: Verification
    # include_RelFiles:
    #   - Experimental/Theory/Std/Generic/Theory/Definition.agda
    #   - Experimental/Theory/Std/Generic/LogicalFramework/Definition.agda
    agdaPublishDocumentDescription:
      documentTitle: "Verified Type Checking"
      documentAuthor: "Maxim Urschumzew"
      documentType: SCReport
      documentDate: ""
      documentFilesAndHeadings:
      - Notes/HataStandardImport.agda
      - = Introduction
      - = Basics
      - == Lists
      - Core/Data/List/Variant/Unary/Definition.agda
      - Core/Data/List/Variant/Unary/Element.agda
      - Core/Data/List/Variant/Unary/Natural.agda
      - == Hindley Milner Types
      - Core/Data/Language/HindleyMilner/Type/Example/Definition.agda
      - == Equality and Setoids
      - Conventions/Prelude/Classes/Setoid.agda
      - == Monoids
      - Core/Algebra/Monoid/Definition.agda
      - Core/Data/List/Variant/Unary/Instance/Monoid.agda
      - == Binary lists
      - Core/Data/List/Variant/Binary/Definition.agda
      - Core/Data/List/Variant/Binary/Element/Definition.agda
      - Core/Data/List/Variant/Binary/Instance/Setoid.agda
      - Core/Data/List/Variant/Binary/Instance/Monoid.agda
      - = Category theory
      - == Categories
      - Core/Category/Std/Category/Definition.agda
      - Core/Data/Universe/Instance/Category.agda
      - == Morphisms in categories
      - Core/Category/Std/Morphism/Iso/Definition.agda
      - Core/Category/Std/Morphism/Epi/Definition.agda
      - == Colimits
      - === Coproducts
      - Core/Category/Std/Limit/Specific/Coproduct/Variant/Binary.agda
      - === Coequalizers
      - Core/Category/Std/Limit/Specific/Coequalizer/Definition.agda
      - = Multisorted Simple Terms
      - == Definition
      - Core/Theory/Std/Specific/ProductTheory/Unification/Definition.agda
      - == Substitution and Category Instance
      - = Unfication
      - Core/Computation/Unification/Definition.agda
      - == Idea of unification algorithm
      - == Categorical Unification
      - Core/Computation/Unification/Categorical/Definition.agda
      - Core/Computation/Unification/Categorical/PrincipalFamily.agda
      - Core/Computation/Unification/Categorical/PrincipalFamilyCat.agda
      - == Categorical Unification for Simple Terms
      # - === Definition
      # - === Hindley Milner Example
      # - === Functor, Monad instance
      # - Core/Theory/Std/Specific/ProductTheory/Unification/Instance/FormalSystem.agda
      # - == Categorical Unification for Simple Terms
      # - = Hindley Damas Milner Type Theory
      # - == Untyped terms
      # - == Typed terms
      # - == Small proof
      # - == Typechecking algorithm
      - = Appendix
      - == Notes
      - Core/Data/List/Notes/ReasonForFreeMonoidVariant.agda


    libraryDefinitions_Filename: hata.agda-lib

  - projectName: hata-book
    autobuild: false
    fastbuild: false
    source_RelDir: Verification
    agdaPublishDocumentDescription:
      documentTitle: "Project æ——"
      documentSubtitle: "Theory and Implementation of Programming Languages \\\\ \\vskip 0.8em Exposition, Development notes and Manual"
      documentAuthor: "Maxim Urschumzew"
      documentType: SCReport
      documentDate: ""
      documentFilesAndHeadings:
      - Overview.agda
      - ===About
      - Overview/About.agda
      - =Theoretical Foundations
      - ==Algebra
      - ==Order Theory
      - ==Category Theory
      - ==Theories
      - ===Std-Generic
      - ====Theory
      - Experimental/Theory/Std/Generic/Theory/Definition.agda
      - ====Logical Framework
      - Experimental/Theory/Std/Generic/LogicalFramework/Definition.agda
      - =Applications
      - ==Editor
      - ===Notes
      - Editor/Notes.agda
    libraryDefinitions_Filename: hata.agda-lib


      # - Experimental/Theory/Std/Generic/Theory/Definition.agda
      # - Experimental/Theory/Std/Generic/LogicalFramework/Definition.agda


      # - Writing/Introduction.agda
      # - Core/Type.agda
      # - Core/Type/Equiv.agda
      # - Core/Category.agda
      # - Core/Category/Definition.agda
      # - Core/Category/Instance.agda
      # - Core/Category/Instance/Type.agda
      # - Core/Category/Instance/Set/Definition.agda
      # - Core/Category/Instance/Opposite.agda
      # - Core/Category/Instance/Functor.agda
      # - Core/Category/Instance/Cat/Definition.agda
      # - Core/Category/Functor/Category.agda
      # - Core/Category/Functor.agda
      # - Core/Category/Functor/Adjunction.agda
      # - Core/Category/Functor/Representable.agda
      # - Core/Category/Functor/Presheaf.agda
      # - Core/Category/Quiver.agda
      # - Core/Category/FreeCategory.agda
      # - Core/Category/Limit.agda
      # - Core/Category/Limit/Specific.agda
      # - Core/Category/Limit/Specific/Coequalizer.agda
      # - Core/Category/Limit/Specific/Coproduct.agda
      # - Core/Category/Limit/Specific/Initial.agda
      # - Core/Category/Limit/Kan.agda
      # - Core/Category/Limit/Kan/Definition.agda
      # - Core/Category/Limit/Kan/Local.agda
      # - Core/Category/Instance/Type.agda
      # - Core/Category/Instance/Set/Equalizers.agda
      # - Core/Category/Instance/IdxSet/Definition.agda
      # - Core/Category/Instance/IdxSet/Coproducts.agda
      # - Core/Category/Instance/Kleisli/Definition.agda
      # - Core/Category/Monad/Definition.agda
      # - Core/Category/Monad/Instance/Coproduct.agda
      # - Core/Algebra.agda
      # - Core/Algebra/Basic.agda
      # - Core/Algebra/Basic/Monoid.agda
      # - Core/Algebra/Basic/Group.agda
      # - Core/Algebra/Basic/Abelian.agda
      # - Core/Algebra/Basic/Ring.agda
      # - Core/Algebra/Action.agda
      # - Core/Algebra/Action/MonoidModule.agda
      # - Unification/Definition.agda
      # - Unification/RecAccessible.agda
      # - Unification/Instance/Signature.agda
      # - Unification/Substitution.agda
      # - Unification/RecMonad.agda
      # - Unification/RecModule.agda
      # - Unification/TheFunctor.agda
      # - Typechecking.agda
