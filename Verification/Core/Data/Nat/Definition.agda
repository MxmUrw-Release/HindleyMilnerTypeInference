
module Verification.Core.Data.Nat.Definition where

open import Verification.Core.Conventions renaming (โ to Nat)

open import Verification.Core.Set.Setoid
open import Verification.Core.Set.Discrete
open import Verification.Core.Algebra.Monoid
open import Verification.Core.Algebra.Group
open import Verification.Core.Algebra.Ring
open import Verification.Core.Order.Preorder
open import Verification.Core.Order.Totalorder

โแต = Nat

macro
  โ : SomeStructure
  โ = #structureOn Nat

-- instance
--   isSetoid:โ : isSetoid _ โ
--   isSetoid._โผ'_ isSetoid:โ = _โฃ_
--   isSetoid.isEquivRel:โผ isSetoid:โ = it

instance
  isMonoid:โ : isMonoid โ
  isMonoid:โ = record
                 { _โ_ = _+-โ_
                 ; โ = 0
                 ; unit-l-โ = refl
                 ; unit-r-โ = {!!}
                 ; assoc-l-โ = {!!}
                 -- ; assoc-r-โ = {!!}
                 ; _โโโ_ = {!!}
                 }

instance
  isCommutative:โ : isCommutative โ
  isCommutative:โ = {!!}


instance
  isPreorder:โ : isPreorder _ โฒ โ โฒ
  isPreorder._โค_ isPreorder:โ = โค-Base _โค-โ_
  isPreorder.reflexive isPreorder:โ = incl refl-โค-โ
  isPreorder._โก_ isPreorder:โ (incl p) (incl q) = incl (trans-โค-โ p q)
  isPreorder.transp-โค isPreorder:โ (refl-StrId) (refl-StrId) r = r
  -- incl (transport (ฮป i -> p i โค-โ q i) r)

instance
  isPartialorder:โ : isPartialorder โ
  isPartialorder:โ = record
    { antisym = ฮป p q -> (antisym-โค-โ โจ p โฉ โจ q โฉ)
    }

instance
  isTotalorderโบ:โ : isTotalorderโบ โ
  isTotalorderโบ:โ = record
    { totalโบ = lem-10
    }
    where
      lem-5 : โ {a b} -> (a <-โ b) -> a โผ b -> ๐-๐ฐ
      lem-5 p (refl-StrId) = ยฌm<m p

      lem-10 : โ a b -> Trichotomy' โ a b
      lem-10 a b with a โ-โ b
      ... | lt x = lt (incl (<-weaken x) , lem-5 x)
      ... | eq x = eq (x)
      ... | gt x = gt (incl (<-weaken x) , lem-5 x)


instance
  isDiscrete:โ : isDiscrete โ
  isDiscrete:โ = record { _โ-Str_ = discreteโ }

instance
  isSet-Str:โ : isSet-Str โ
  isSet-Str:โ = {!!}



monotone-l-โ-โ : โ{a b c : โ} -> a โค b -> c โ a โค c โ b
monotone-l-โ-โ {a} {b} {c} (incl (b-a , bap)) = incl (b-a , p)
  where
    p : b-a +-โ (c +-โ a) โฃ c +-โ b
    p = b-a +-โ (c +-โ a)   โจ refl {a = b-a} โโโ comm-โ {a = c} {a} โฉ-โผ
        b-a +-โ (a +-โ c)   โจ assoc-r-โ {a = b-a} {b = a} {c = c} โฉ-โผ
        (b-a +-โ a) +-โ c   โจ bap โโโ refl {a = c} โฉ-โผ
        b โ c                โจ comm-โ {a = b} โฉ-โผ
        c โ b                โ







