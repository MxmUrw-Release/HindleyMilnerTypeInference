
module Verification.Core.Data.Language.HindleyMilner.Variant.Classical.Untyped.Definition where

open import Verification.Conventions hiding (ℕ)
open import Verification.Core.Set.Discrete
open import Verification.Core.Algebra.Monoid.Definition
-- open import Verification.Core.Algebra.Monoid.Free
open import Verification.Core.Data.List.Variant.Unary.Definition
open import Verification.Core.Data.List.Variant.Unary.Element
open import Verification.Core.Data.List.Variant.Unary.Natural
-- open import Verification.Core.Category.Std.AllOf.Collection.Basics
-- open import Verification.Core.Data.AllOf.Collection.Basics
-- open import Verification.Core.Data.AllOf.Collection.TermTools


-- | The terms of HM are defined in \cite{TT:Damas:1984} to be given by the
--   BNF grammar
--   $\begin{equation} e ::= x | ee' | λx.e | let x=e in e' \end{equation}$
--   where x is an element of a set of identifiers. The let-term is a neccessary
--   addition to the usual variable, application and lambda-abstraction terms
--   of lambda-calculus, since this is the location where the generalization over
--   metavariables happens.
--
-- | The formalization in Agda is straightforward as an inductive data type
--   with four constructors. Instead of variable names, De Brujin indices are
--   used, which means that the type of terms is parametrized by a natural number |k|
--   describing the number of variables currently in scope. Such a presentation
--   can be found for example in \cite{TT:AltenkirchKaposi:2016} or \cite{Agda:WKS:2020}.
--

-- [Definition]
-- | The type family [..] describes the /untyped Hindley-Milner terms/,
--   where elements of |Te k| are terms with |k| variables in scope.
--   It is defined as a data type, inductively generated by the following constructors:
data UntypedℒHM : ♮ℕ -> 𝒰₀ where
  -- | - A constructor [..]
  var  : ∀{k i} -> k ∍♮ i -> UntypedℒHM k

  -- | - A constructor [..]
  slet : ∀{k} -> UntypedℒHM k -> UntypedℒHM (tt ∷ k) -> UntypedℒHM k

  -- | - A constructor [..]
  app : ∀{k} -> UntypedℒHM k -> UntypedℒHM k -> UntypedℒHM k

  -- | - A constructor [..].
  lam : ∀{k} -> UntypedℒHM (tt ∷ k) -> UntypedℒHM k

-- #Notation/Rewrite# UntypedℒHM = Te_{HM}
-- #Notation/Rewrite# ♮ℕ = {}^{∷}ℕ
-- #Notation/Rewrite# 人ℕ = {}^{⋆}ℕ

-- //







