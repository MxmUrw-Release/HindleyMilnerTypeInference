
module Verification.Core.Data.Language.HindleyMilner.Variant.Classical.Typed.Typecheck where

open import Verification.Conventions hiding (lookup ; ‚Ñï ; _‚äî_)
open import Verification.Core.Set.Discrete
open import Verification.Core.Algebra.Monoid.Definition
open import Verification.Core.Algebra.Monoid.Free
open import Verification.Core.Data.AllOf.Collection.Basics
open import Verification.Core.Data.AllOf.Collection.TermTools
open import Verification.Core.Category.Std.AllOf.Collection.Basics
open import Verification.Core.Category.Std.AllOf.Collection.Limits
open import Verification.Core.Computation.Unification.Definition
-- open import Verification.Core.Category.Std.AllOf.Collection.Monads
-- open import Verification.Core.Category.Std.Fibration.GrothendieckConstruction.Definition

open import Verification.Core.Theory.Std.Specific.ProductTheory.Module
open import Verification.Core.Theory.Std.Specific.ProductTheory.Instance.hasBoundaries

open import Verification.Core.Data.Language.HindleyMilner.Type.Definition
open import Verification.Core.Data.Language.HindleyMilner.Variant.Classical.Typed.Definition
open import Verification.Core.Data.Language.HindleyMilner.Variant.Classical.Untyped.Definition

open import Verification.Core.Category.Std.Limit.Specific.Coequalizer
open import Verification.Core.Set.Decidable



record _<Œì_ {k} {Œºs ŒΩs} (Œì : ‚ÑíHMCtx' k Œºs) (Œì' : ‚ÑíHMCtx' k ŒΩs) : ùí∞‚ÇÄ where
  field fst : Œºs ‚ü∂ ŒΩs
  -- field snd 
open _<Œì_ public

record CtxTypingInstance {Œºs k} (Œì : ‚ÑíHMCtx' k Œºs) (te : Untyped‚ÑíHM k) : ùí∞‚ÇÄ where
  constructor _‚ä©_,_,_,_
  field metas : ‚ÑíHMTypes
  field ctx : ‚ÑíHMCtx' k metas
  field typ : ‚ÑíHMType (‚ü® metas ‚äî ‚ä• ‚ü©)
  field isInstance : Œì <Œì ctx
  field hasType : isTyped‚ÑíHM (metas ‚ä© ctx ‚ä¢ (‚àÄ[ (incl ‚óå) ] typ)) te

open CtxTypingInstance public

Œ≥ : ‚àÄ{Œºs k} -> (Œì : ‚ÑíHMCtx' k Œºs) -> (te : Untyped‚ÑíHM k)
  -> (CtxTypingInstance Œì te -> ‚ä•-ùí∞ {‚Ñì‚ÇÄ})
    +
     CtxTypingInstance Œì te
Œ≥ Œì var = {!!}
Œ≥ Œì (slet te te‚ÇÅ) = {!!}

-- the case of an application
-- typecheck the first term with the given context
Œ≥ Œì (app te se) with Œ≥ Œì te
... | (left _) = {!!}
... | (right (ŒΩs‚ÇÄ ‚ä© Œì‚ÇÄ , œÑ‚ÇÄ , Œì‚ÇÄ<Œì , Œì‚ÇÄ‚ä¢œÑ‚ÇÄ )) with Œ≥ Œì‚ÇÄ se
... | (left _) = {!!}
... | (right (ŒΩs‚ÇÅ ‚ä© Œì‚ÇÅ , œÑ‚ÇÅ , Œì‚ÇÅ<Œì‚ÇÄ , Œì‚ÇÅ‚ä¢œÑ‚ÇÅ )) = resn
  where
    -- lift the œÑ0 typing to Œì‚ÇÅ
    œÉ‚ÇÄ : ŒΩs‚ÇÄ ‚ü∂ ŒΩs‚ÇÅ
    œÉ‚ÇÄ = fst Œì‚ÇÅ<Œì‚ÇÄ

    -- we lift the old type œÑ‚ÇÄ to the metas ŒΩs‚ÇÅ
    œÑ‚ÇÄ' : ‚ÑíHMType _
    œÑ‚ÇÄ' = œÑ‚ÇÄ ‚áÉ[ œÉ‚ÇÄ ‚áÉ‚äî‚áÇ id ]‚áÇ

    -- we need a new type variable for the return
    -- type of the application, so we move to ŒΩs‚ÇÇ
    ŒΩs‚ÇÇ = (ŒΩs‚ÇÅ ‚äî ‚ä•) ‚äî st

    œÑ‚ÇÄ'' : ‚ÑíHMType ‚ü® ŒΩs‚ÇÇ ‚ü©
    œÑ‚ÇÄ'' = œÑ‚ÇÄ' ‚áÉ[ Œπ‚ÇÄ ]‚áÇ

    -- we call the new type Œ≤
    Œ≤ : ‚ÑíHMType ‚ü® ŒΩs‚ÇÇ ‚ü©
    Œ≤ = var (right-‚àç incl)

    -- the types which we unify are:
    œï : ‚ÑíHMType ‚ü® ŒΩs‚ÇÇ ‚ü©
    œï = œÑ‚ÇÄ'' ‚áí Œ≤

    œÑ‚ÇÅ' : ‚ÑíHMType ‚ü® ŒΩs‚ÇÇ ‚ü©
    œÑ‚ÇÅ' = œÑ‚ÇÅ ‚áÉ[ Œπ‚ÇÄ ]‚áÇ

    Œì‚ÇÅ' : ‚ÑíHMCtx' _ ŒΩs‚ÇÇ
    Œì‚ÇÅ' = Œì‚ÇÅ ‚áÉ[ Œπ‚ÇÄ ‚óÜ Œπ‚ÇÄ ]‚áÇ-Ctx

    res = unify-‚ÑíHMTypes (asArr œï) (asArr œÑ‚ÇÅ')

    resn = case res of
           {!!}
           Œª x ‚Üí
             let œÉ = œÄ‚Çå
                 Œ≤‚ÇÇ = Œ≤ ‚áÉ[ œÉ ‚óÜ Œπ‚ÇÄ ]‚áÇ
                 Œì‚ÇÇ = Œì‚ÇÅ' ‚áÉ[ œÉ ]‚áÇ-Ctx

             in right (‚ü® x ‚ü© ‚ä© Œì‚ÇÇ , Œ≤‚ÇÇ , {!!} , app {!!} {!!})


-- ... | (left _) = {!!}
-- ... | (right res) = {!!}




-- the case of a lambda
Œ≥ {Œºs} {k} Œì (lam te) = {!!}
{-
  let
    -- create a new metavariable
    Œºs' = Œºs ‚äî st

    -- create the context which contains this new variable
    Œì' : ‚ÑíHMCtx' (tt ‚à∑ k) Œºs'
    Œì' = ‚àÄ[ (incl ‚óå) ] (var (left-‚àç (right-‚àç incl))) ‚à∑ mapOf (‚ÑíHMCtx' k) Œπ‚ÇÄ Œì

    -- call typechecking recursively on `te`
    res = Œ≥ Œì' te

    -- distinguish between failure and not
  in case res of
      -- if there was a failure,
      -- we also have to fail
      (Œª ¬¨typing ‚Üí left
         -- assume we have a typing for lambda
         -- this means that we also have a typing for te
         -- which we know is impossible
         Œª {(ŒΩs ‚ä© Œî , œÑ , Œì'<Œî , hastyp)
                ‚Üí let ŒΩs' , Œî' , œÑ' , hastyp' = ¬ß-isTyped‚ÑíHM.prop-1 te hastyp
                  in {!!} -- ¬¨typing (ŒΩs' ‚ä© Œî' , œÑ' , {!!} , hastyp')
                  })


      -- if there was no failure, we can use this result
      Œª {
        -- we know that `Œ±` has no quantification
        (ŒΩs ‚ä© (‚àÄ[] Œ± ‚à∑ Œî) , Œ≤ , Œì'<Œî , hastype) ‚Üí

          right (ŒΩs ‚ä© Œî , _ , {!!} , lam2 hastype)

        -- the case where our type suddenly has a quantification
        -- cannot occur
        ;(ŒΩs ‚ä© (‚àÄ[ incl (a ‚à∑ as) ] Œ± ‚à∑ Œî) , Œ≤ , Œì'<Œî , hastype) ‚Üí
          {!!}
        }

-}









{-
Œ≥ Œì (app te se) =
  -- typecheck the first term with the given context
  case Œ≥ Œì te of
    {!!}
    Œª {(ŒΩs‚ÇÄ ‚ä© Œì‚ÇÄ , œÑ‚ÇÄ , Œì‚ÇÄ<Œì , Œì‚ÇÄ‚ä¢œÑ‚ÇÄ ) ->

        -- typecheck the second term with the returned context
        case Œ≥ Œì‚ÇÄ se of
          {!!}
          Œª {(ŒΩs‚ÇÅ ‚ä© Œì‚ÇÅ , œÑ‚ÇÅ , Œì‚ÇÅ<Œì‚ÇÄ , Œì‚ÇÅ‚ä¢œÑ‚ÇÅ ) ->
            -- lift the œÑ0 typing to Œì‚ÇÅ
            let œÉ‚ÇÄ : ŒΩs‚ÇÄ ‚ü∂ ŒΩs‚ÇÅ
                œÉ‚ÇÄ = fst Œì‚ÇÅ<Œì‚ÇÄ

                -- we lift the old type œÑ‚ÇÄ to the metas ŒΩs‚ÇÅ
                œÑ‚ÇÄ' : ‚ÑíHMType _
                œÑ‚ÇÄ' = œÑ‚ÇÄ ‚áÉ[ œÉ‚ÇÄ ‚áÉ‚äî‚áÇ id ]‚áÇ

                -- we need a new type variable for the return
                -- type of the application, so we move to ŒΩs‚ÇÇ
                ŒΩs‚ÇÇ = (ŒΩs‚ÇÅ ‚äî ‚ä•) ‚äî st

                œÑ‚ÇÄ'' : ‚ÑíHMType ‚ü® ŒΩs‚ÇÇ ‚ü©
                œÑ‚ÇÄ'' = œÑ‚ÇÄ' ‚áÉ[ Œπ‚ÇÄ ]‚áÇ

                -- we call the new type Œ≤
                Œ≤ : ‚ÑíHMType ‚ü® ŒΩs‚ÇÇ ‚ü©
                Œ≤ = var (right-‚àç incl)

                -- the types which we unify are:
                œï : ‚ÑíHMType ‚ü® ŒΩs‚ÇÇ ‚ü©
                œï = œÑ‚ÇÄ'' ‚áí Œ≤

                œà : ‚ÑíHMType ‚ü® ŒΩs‚ÇÇ ‚ü©
                œà = œÑ‚ÇÅ ‚áÉ[ Œπ‚ÇÄ ]‚áÇ

                res : (¬¨ hasCoequalizerCandidate (asArr œï , asArr œà)) + (hasCoequalizer (asArr œï) (asArr œà))
                res = unify (asArr œï) (asArr œà)

                -- typing‚ÇÄ : isTyped‚ÑíHM (Œì‚ÇÅ ‚ä¢ )
                -- typing‚ÇÄ = ?

            in case res of
                {!!}
                Œª {x ‚Üí {!!}
                }

                -- case res of
                -- œâs : ‚ÑíHMTypes
                -- œâs = {!!}

                -- œÅ : ‚ÑíHMType ‚ü® œâs ‚ü©
                -- œÅ = {!!}
            }
      }

-}
