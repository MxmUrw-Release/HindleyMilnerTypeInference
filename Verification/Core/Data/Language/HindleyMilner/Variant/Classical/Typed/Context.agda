
module Verification.Core.Data.Language.HindleyMilner.Variant.Classical.Typed.Context where

open import Verification.Conventions hiding (lookup ; ‚Ñï ; _‚äî_)
open import Verification.Core.Set.Setoid.Definition
open import Verification.Core.Set.Discrete
open import Verification.Core.Algebra.Monoid.Definition
open import Verification.Core.Algebra.Monoid.Free
open import Verification.Core.Data.AllOf.Collection.Basics
open import Verification.Core.Data.AllOf.Collection.TermTools
open import Verification.Core.Category.Std.AllOf.Collection.Basics
open import Verification.Core.Category.Std.AllOf.Collection.Limits
open import Verification.Core.Category.Std.Category.Subcategory.Full

open import Verification.Core.Theory.Std.Specific.ProductTheory.Module
open import Verification.Core.Theory.Std.Specific.ProductTheory.Instance.hasBoundaries

open import Verification.Core.Data.Language.HindleyMilner.Type.Definition
-- open import Verification.Core.Data.Language.HindleyMilner.Variant.Classical.Untyped.Definition
open import Verification.Core.Data.Language.HindleyMilner.Helpers

open import Verification.Core.Category.Std.RelativeMonad.KleisliCategory.Definition

open import Verification.Core.Order.Preorder



record _<Œì_ {k} {Q : ‚ÑíHMQuant k} {Œºs ŒΩs} (Œì : ‚ÑíHMCtxFor Q Œºs) (Œì' : ‚ÑíHMCtxFor Q ŒΩs) : ùí∞‚ÇÄ where
  field fst : Œºs ‚ü∂ ŒΩs
  field snd : Œì ‚áÉ[ fst ]‚áÇ-CtxFor ‚â° Œì'
open _<Œì_ public

record Some‚ÑíHMCtx·µò {k} (Q : ‚ÑíHMQuant k) : ùí∞‚ÇÄ where
  constructor somectx
  field {fst} : ‚ÑíHMTypes
  field snd : ‚ÑíHMCtxFor Q fst

open Some‚ÑíHMCtx·µò public


module _ {k} (Q : ‚ÑíHMQuant k) where
  macro Some‚ÑíHMCtx = #structureOn (Some‚ÑíHMCtx·µò Q)


module _ {k} {Q : ‚ÑíHMQuant k} where

  instance
    isSetoid:Some‚ÑíHMCtx : isSetoid (Some‚ÑíHMCtx Q)
    isSetoid:Some‚ÑíHMCtx = isSetoid:byPath

  -- showing that this gives a preorder
  _‚â§-Some‚ÑíHMCtx_ : (Some‚ÑíHMCtx Q) -> Some‚ÑíHMCtx Q -> ùí∞‚ÇÄ
  _‚â§-Some‚ÑíHMCtx_ (somectx Œì) (somectx Œî) = Œì <Œì Œî

  reflexive-Some‚ÑíHMCtx : ‚àÄ{a} -> a ‚â§-Some‚ÑíHMCtx a
  reflexive-Some‚ÑíHMCtx = record
    { fst = id
    ; snd = functoriality-id-‚áÉ[]‚áÇ-CtxFor
    }

  _‚ü°-Some‚ÑíHMCtx_ : ‚àÄ{a b c} -> a ‚â§-Some‚ÑíHMCtx b -> b ‚â§-Some‚ÑíHMCtx c -> a ‚â§-Some‚ÑíHMCtx c
  _‚ü°-Some‚ÑíHMCtx_ {a = somectx Œì‚ÇÄ} {somectx Œì‚ÇÅ} {somectx Œì‚ÇÇ} Œì‚ÇÄ<Œì‚ÇÅ Œì‚ÇÅ<Œì‚ÇÇ =
    let œÉ‚ÇÄ‚ÇÅ = fst Œì‚ÇÄ<Œì‚ÇÅ
        œÉ‚ÇÅ‚ÇÇ = fst Œì‚ÇÅ<Œì‚ÇÇ
        œÉ‚ÇÄ‚ÇÇ = œÉ‚ÇÄ‚ÇÅ ‚óÜ œÉ‚ÇÅ‚ÇÇ

        lem-1 : Œì‚ÇÄ ‚áÉ[ œÉ‚ÇÄ‚ÇÇ ]‚áÇ-CtxFor ‚â° Œì‚ÇÇ
        lem-1 = Œì‚ÇÄ ‚áÉ[ œÉ‚ÇÄ‚ÇÅ ‚óÜ œÉ‚ÇÅ‚ÇÇ ]‚áÇ-CtxFor      ‚ü® sym-Path (functoriality-‚óÜ-‚áÉ[]‚áÇ-CtxFor) ‚ü©-‚â°
                Œì‚ÇÄ ‚áÉ[ œÉ‚ÇÄ‚ÇÅ ]‚áÇ-CtxFor ‚áÉ[ œÉ‚ÇÅ‚ÇÇ ]‚áÇ-CtxFor ‚ü® cong _‚áÉ[ œÉ‚ÇÅ‚ÇÇ ]‚áÇ-CtxFor (snd Œì‚ÇÄ<Œì‚ÇÅ) ‚ü©-‚â°
                Œì‚ÇÅ  ‚áÉ[ œÉ‚ÇÅ‚ÇÇ ]‚áÇ-CtxFor                 ‚ü® snd Œì‚ÇÅ<Œì‚ÇÇ ‚ü©-‚â°
                Œì‚ÇÇ                                  ‚àé-‚â°

    in record { fst = œÉ‚ÇÄ‚ÇÇ ; snd = lem-1 }

  instance
    isPreorder:Some‚ÑíHMCtx : isPreorder ‚Ñì‚ÇÄ (Some‚ÑíHMCtx Q)
    isPreorder:Some‚ÑíHMCtx = record
      { _‚â§_ = _‚â§-Some‚ÑíHMCtx_
      ; reflexive = reflexive-Some‚ÑíHMCtx
      ; _‚ü°_ = _‚ü°-Some‚ÑíHMCtx_
      ; transp-‚â§ = {!!}
      }



-----------------------------------------
-- special functions
module _ {k} {Q : ‚ÑíHMQuant k} where
  tail-Some‚ÑíHMCtx : ‚àÄ{ŒΩsas ŒΩsbs Œºs : ‚ÑíHMTypes}
                    -> ‚àÄ{as : ‚ÑíHMCtxFor Q ŒΩsas} {a : ‚ÑíHMType ‚ü® ŒΩsas ‚äî Œºs ‚ü©}
                    -> ‚àÄ{bs : ‚ÑíHMCtxFor Q ŒΩsbs} {b : ‚ÑíHMType ‚ü® ŒΩsbs ‚äî Œºs ‚ü©}
                    -> somectx {tt ‚à∑ k} (a ‚à∑ as) ‚â§ somectx (b ‚à∑ bs)
                    -> (somectx as) ‚â§ (somectx bs)
  tail-Some‚ÑíHMCtx record { fst = fst ; snd = snd } = record { fst = fst ; snd = {!!} }



data ‚ÑíHMQuantMap (Œºs : ‚ÑíHMTypes) : ‚àÄ{k} (Q R : ‚ÑíHMQuant k) -> ùí∞‚ÇÄ where
  [] : ‚ÑíHMQuantMap Œºs [] []
  _‚à∑_ : ‚àÄ{k ŒΩs‚ÇÄ ŒΩs‚ÇÅ Q R} -> (œÉ : ŒΩs‚ÇÄ ‚ü∂ Œºs ‚äî ŒΩs‚ÇÅ) -> ‚ÑíHMQuantMap Œºs {k} Q R
      -> ‚ÑíHMQuantMap Œºs {tt ‚à∑ k} (ŒΩs‚ÇÄ ‚à∑ Q) (ŒΩs‚ÇÅ ‚à∑ R)

module _ {Œºs} where
  lookup-‚ÑíHMQuantMap : ‚àÄ{k i} -> {Q R : ‚ÑíHMQuant k} -> (œÉ : ‚ÑíHMQuantMap Œºs Q R) -> (k‚àçi : k ‚àç‚ôÆ i)
                       -> lookup-DList Q k‚àçi ‚ü∂ Œºs ‚äî lookup-DList R k‚àçi
  lookup-‚ÑíHMQuantMap (œÉ ‚à∑ œÉs) incl = œÉ
  lookup-‚ÑíHMQuantMap (œÉ ‚à∑ œÉs) (skip k‚àçi) = lookup-‚ÑíHMQuantMap œÉs k‚àçi

  apply-‚ÑíHMQuantMap : ‚àÄ{k} {Q R : ‚ÑíHMQuant k} -> (‚ÑíHMQuantMap Œºs Q R) -> ‚ÑíHMCtxFor Q Œºs -> ‚ÑíHMCtxFor R Œºs
  apply-‚ÑíHMQuantMap [] [] = []
  apply-‚ÑíHMQuantMap (œÉ ‚à∑ œÉs) (œÑ ‚à∑ Œì) = œÑ ‚áÉ[ ‚¶ó Œπ‚ÇÄ , œÉ ‚¶ò ]‚áÇ ‚à∑ apply-‚ÑíHMQuantMap œÉs Œì


module _ {Œºs‚ÇÄ} {Œºs‚ÇÅ} where
  extend-‚ÑíHMQuantMap : ‚àÄ{k} {Q R : ‚ÑíHMQuant k} -> (Œºs‚ÇÄ ‚ü∂ Œºs‚ÇÅ) -> (‚ÑíHMQuantMap Œºs‚ÇÄ Q R) -> (‚ÑíHMQuantMap Œºs‚ÇÅ Q R)
  extend-‚ÑíHMQuantMap œï [] = []
  extend-‚ÑíHMQuantMap œï (œÉ ‚à∑ œÉs) = (œÉ ‚óÜ œï ‚áÉ‚äî‚áÇ id) ‚à∑ (extend-‚ÑíHMQuantMap œï œÉs)


module ¬ß-‚ÑíHMQuantMap where
  module _ {Œºs‚ÇÄ} {Œºs‚ÇÅ} where
    prop-1 : ‚àÄ{k} {Q R : ‚ÑíHMQuant k} -> (œï : Œºs‚ÇÄ ‚ü∂ Œºs‚ÇÅ) -> (œÉs : ‚ÑíHMQuantMap Œºs‚ÇÄ Q R)
             -> (Œì : ‚ÑíHMCtxFor Q Œºs‚ÇÄ)
             -> apply-‚ÑíHMQuantMap (extend-‚ÑíHMQuantMap œï œÉs) (Œì ‚áÉ[ œï ]‚áÇ·∂ú)
               ‚â° (apply-‚ÑíHMQuantMap œÉs Œì ‚áÉ[ œï ]‚áÇ·∂ú)
    prop-1 œï [] [] = refl-‚â°
    prop-1 œï (œÉ ‚à∑ œÉs) (c ‚à∑ Œì) = Œª i -> lem-1 i ‚à∑ prop-1 œï œÉs Œì i
      where
        lem-1 : c ‚áÉ[ œï ‚áÉ‚äî‚áÇ id ]‚áÇ ‚áÉ[ ‚¶ó Œπ‚ÇÄ , œÉ ‚óÜ (œï ‚áÉ‚äî‚áÇ id) ‚¶ò ]‚áÇ ‚â° c ‚áÉ[ ‚¶ó Œπ‚ÇÄ , œÉ ‚¶ò ]‚áÇ ‚áÉ[ œï ‚áÉ‚äî‚áÇ id ]‚áÇ
        lem-1 = {!!}

  prop-2 : ‚àÄ{k i Œºs‚ÇÄ} {Q R : ‚ÑíHMQuant k} -> (œÉs : ‚ÑíHMQuantMap Œºs‚ÇÄ Q R)
            -> (Œì : ‚ÑíHMCtxFor Q Œºs‚ÇÄ)
            -> (k‚àçi : k ‚àç‚ôÆ i)
            -> lookup-DDList Œì k‚àçi ‚áÉ[ ‚¶ó Œπ‚ÇÄ , lookup-‚ÑíHMQuantMap œÉs k‚àçi ‚¶ò ]‚áÇ
              ‚â° lookup-DDList (apply-‚ÑíHMQuantMap œÉs Œì) k‚àçi
  prop-2 (œÉ ‚à∑ œÉs) (c ‚à∑ Œì) incl = refl-‚â°
  prop-2 (œÉ ‚à∑ œÉs) (c ‚à∑ Œì) (skip k‚àçi) = prop-2 œÉs Œì k‚àçi




sz : ‚àÄ{a b : ‚ÑíHMTypes} -> a ‚ü∂ b
sz = ‚ßúsubst (construct-D‰∫∫List Œª {tt x ‚Üí con ‚Ñï·µó ‚óå-‚ßú})

œñ‚ÇÄ : ‚àÄ{a b : ‚ÑíHMTypes} -> a ‚äî b ‚ü∂ a
œñ‚ÇÄ = ‚¶ó id , sz ‚¶ò

œñ‚ÇÅ : ‚àÄ{a b : ‚ÑíHMTypes} -> a ‚äî b ‚ü∂ b
œñ‚ÇÅ = ‚¶ó sz , id ‚¶ò

module ¬ß-œñ where
  prop-1 : ‚àÄ{a : ‚ÑíHMTypes} {f : ‚ä• ‚ü∂ a} -> ‚¶ó id , f ‚¶ò ‚óÜ Œπ‚ÇÄ ‚àº id {a = a ‚äî ‚ä•}
  prop-1 {a} {f} = ‚¶ó id , f ‚¶ò ‚óÜ Œπ‚ÇÄ                  ‚ü® append-‚¶ó‚¶ò ‚ü©-‚àº
           ‚¶ó id ‚óÜ Œπ‚ÇÄ , f ‚óÜ Œπ‚ÇÄ ‚¶ò                     ‚ü® cong-‚àº {{isSetoidHom:‚¶ó‚¶ò}} (unit-l-‚óÜ , expand-‚ä•) ‚ü©-‚àº
           ‚¶ó Œπ‚ÇÄ {a = a} {b = ‚ä•} , elim-‚ä• ‚¶ò          ‚ü® cong-‚àº {{isSetoidHom:‚¶ó‚¶ò}} ((unit-r-‚óÜ ‚Åª¬π) , (expand-‚ä• ‚Åª¬π)) ‚ü©-‚àº
           ‚¶ó Œπ‚ÇÄ {b = ‚ä•} ‚óÜ id , Œπ‚ÇÅ {a = a} ‚óÜ id ‚¶ò    ‚ü® expand-Œπ‚ÇÄ,Œπ‚ÇÅ ‚Åª¬π ‚ü©-‚àº
           id {a = a ‚äî ‚ä•}                       ‚àé


  prop-2 : ‚àÄ{a b : ‚ÑíHMTypes} {f g : (a ‚äî ‚ä•) ‚ü∂ b} -> Œπ‚ÇÄ ‚óÜ f ‚àº Œπ‚ÇÄ ‚óÜ g -> f ‚àº g
  prop-2 = ?

