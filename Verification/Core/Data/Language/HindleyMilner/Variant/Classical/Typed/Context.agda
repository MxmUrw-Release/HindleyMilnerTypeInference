
module Verification.Core.Data.Language.HindleyMilner.Variant.Classical.Typed.Context where

open import Verification.Conventions hiding (lookup ; ‚Ñï ; _‚äî_)
open import Verification.Core.Set.Setoid.Definition
open import Verification.Core.Set.Discrete
open import Verification.Core.Algebra.Monoid.Definition
open import Verification.Core.Algebra.Monoid.Free
open import Verification.Core.Data.AllOf.Collection.Basics
open import Verification.Core.Data.AllOf.Collection.TermTools
open import Verification.Core.Category.Std.AllOf.Collection.Basics
open import Verification.Core.Category.Std.AllOf.Collection.Limits
open import Verification.Core.Category.Std.Category.Subcategory.Full

open import Verification.Core.Theory.Std.Specific.ProductTheory.Module
open import Verification.Core.Theory.Std.Specific.ProductTheory.Instance.hasBoundaries

open import Verification.Core.Data.Language.HindleyMilner.Type.Definition
open import Verification.Core.Data.Language.HindleyMilner.Variant.Classical.Untyped.Definition
open import Verification.Core.Data.Language.HindleyMilner.Helpers

open import Verification.Core.Category.Std.RelativeMonad.KleisliCategory.Definition

open import Verification.Core.Order.Preorder



record _<Œì_ {k} {Q : ‚ÑíHMQuant k} {Œºs ŒΩs} (Œì : ‚ÑíHMCtxFor Q Œºs) (Œì' : ‚ÑíHMCtxFor Q ŒΩs) : ùí∞‚ÇÄ where
  field fst : Œºs ‚ü∂ ŒΩs
  field snd : Œì ‚áÉ[ fst ]‚áÇ-CtxFor ‚â° Œì'
open _<Œì_ public

record Some‚ÑíHMCtx·µò {k} (Q : ‚ÑíHMQuant k) : ùí∞‚ÇÄ where
  constructor _,_
  field fst : ‚ÑíHMTypes
  field snd : ‚ÑíHMCtxFor Q fst

open Some‚ÑíHMCtx·µò public


module _ {k} (Q : ‚ÑíHMQuant k) where
  macro Some‚ÑíHMCtx = #structureOn (Some‚ÑíHMCtx·µò Q)


module _ {k} {Q : ‚ÑíHMQuant k} where

  instance
    isSetoid:Some‚ÑíHMCtx : isSetoid (Some‚ÑíHMCtx Q)
    isSetoid:Some‚ÑíHMCtx = isSetoid:byPath

  -- showing that this gives a preorder
  _‚â§-Some‚ÑíHMCtx_ : (Some‚ÑíHMCtx Q) -> Some‚ÑíHMCtx Q -> ùí∞‚ÇÄ
  _‚â§-Some‚ÑíHMCtx_ (_ , Œì) (_ , Œî) = Œì <Œì Œî

  reflexive-Some‚ÑíHMCtx : ‚àÄ{a} -> a ‚â§-Some‚ÑíHMCtx a
  reflexive-Some‚ÑíHMCtx = record
    { fst = id
    ; snd = functoriality-id-‚áÉ[]‚áÇ-CtxFor
    }

  _‚ü°-Some‚ÑíHMCtx_ : ‚àÄ{a b c} -> a ‚â§-Some‚ÑíHMCtx b -> b ‚â§-Some‚ÑíHMCtx c -> a ‚â§-Some‚ÑíHMCtx c
  _‚ü°-Some‚ÑíHMCtx_ {a = _ , Œì‚ÇÄ} {_ , Œì‚ÇÅ} {_ , Œì‚ÇÇ} Œì‚ÇÄ<Œì‚ÇÅ Œì‚ÇÅ<Œì‚ÇÇ =
    let œÉ‚ÇÄ‚ÇÅ = fst Œì‚ÇÄ<Œì‚ÇÅ
        œÉ‚ÇÅ‚ÇÇ = fst Œì‚ÇÅ<Œì‚ÇÇ
        œÉ‚ÇÄ‚ÇÇ = œÉ‚ÇÄ‚ÇÅ ‚óÜ œÉ‚ÇÅ‚ÇÇ

        lem-1 : Œì‚ÇÄ ‚áÉ[ œÉ‚ÇÄ‚ÇÇ ]‚áÇ-CtxFor ‚â° Œì‚ÇÇ
        lem-1 = Œì‚ÇÄ ‚áÉ[ œÉ‚ÇÄ‚ÇÅ ‚óÜ œÉ‚ÇÅ‚ÇÇ ]‚áÇ-CtxFor      ‚ü® sym-Path (functoriality-‚óÜ-‚áÉ[]‚áÇ-CtxFor) ‚ü©-‚â°
                Œì‚ÇÄ ‚áÉ[ œÉ‚ÇÄ‚ÇÅ ]‚áÇ-CtxFor ‚áÉ[ œÉ‚ÇÅ‚ÇÇ ]‚áÇ-CtxFor ‚ü® cong _‚áÉ[ œÉ‚ÇÅ‚ÇÇ ]‚áÇ-CtxFor (snd Œì‚ÇÄ<Œì‚ÇÅ) ‚ü©-‚â°
                Œì‚ÇÅ  ‚áÉ[ œÉ‚ÇÅ‚ÇÇ ]‚áÇ-CtxFor                 ‚ü® snd Œì‚ÇÅ<Œì‚ÇÇ ‚ü©-‚â°
                Œì‚ÇÇ                                  ‚àé-‚â°

    in record { fst = œÉ‚ÇÄ‚ÇÇ ; snd = lem-1 }

  instance
    isPreorder:Some‚ÑíHMCtx : isPreorder ‚Ñì‚ÇÄ (Some‚ÑíHMCtx Q)
    isPreorder:Some‚ÑíHMCtx = record
      { _‚â§_ = _‚â§-Some‚ÑíHMCtx_
      ; reflexive = reflexive-Some‚ÑíHMCtx
      ; _‚ü°_ = _‚ü°-Some‚ÑíHMCtx_
      ; transp-‚â§ = {!!}
      }



  -----------------------------------------
  -- special functions
  -- tail-Some‚ÑíHMCtx : ‚àÄ{as bs : Some‚ÑíHMCtx Q} -> {ŒΩs} {a : ‚ÑíHMType} -> a ‚â§ b







