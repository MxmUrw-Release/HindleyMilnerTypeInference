
module Verification.Core.Data.Language.HindleyMilner.Variant.Classical.Typed.Typecheck.Statement where

open import Verification.Conventions hiding (‚Ñï ; _‚äî_)
open import Verification.Core.Set.Setoid.Definition
open import Verification.Core.Set.Discrete
open import Verification.Core.Algebra.Monoid.Definition

open import Verification.Core.Data.Product.Definition
open import Verification.Core.Data.Sum.Definition

open import Verification.Core.Data.Substitution.Variant.Base.Definition

open import Verification.Core.Data.List.Variant.Unary.Definition
open import Verification.Core.Data.List.Variant.Unary.Element
open import Verification.Core.Data.List.Variant.Binary.Definition
open import Verification.Core.Data.List.Dependent.Variant.Unary.Definition
open import Verification.Core.Data.List.Dependent.Variant.Binary.Definition

open import Verification.Core.Theory.Std.Specific.FreeFiniteCoproductTheory.Param
open import Verification.Core.Theory.Std.Specific.FreeFiniteCoproductTheory.Definition
open import Verification.Core.Theory.Std.Specific.FreeFiniteCoproductTheory.Instance.Functor
open import Verification.Core.Theory.Std.Specific.FreeFiniteCoproductTheory.Instance.RelativeMonad

open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Morphism.Iso
open import Verification.Core.Category.Std.Category.Subcategory.Full
open import Verification.Core.Category.Std.Limit.Specific.Coequalizer
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Definition
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Instance.Functor
open import Verification.Core.Computation.Unification.Definition

open import Verification.Core.Data.Language.HindleyMilner.Type.Variant.FreeFiniteCoproductTheoryTerm.Definition
open import Verification.Core.Data.Language.HindleyMilner.Type.Variant.FreeFiniteCoproductTheoryTerm.Signature
open import Verification.Core.Data.Language.HindleyMilner.Helpers
open import Verification.Core.Data.Language.HindleyMilner.Variant.Classical.Untyped.Definition
open import Verification.Core.Data.Language.HindleyMilner.Variant.Classical.Typed.Context
open import Verification.Core.Data.Language.HindleyMilner.Variant.Classical.Typed.Context.Definition
open import Verification.Core.Data.Language.HindleyMilner.Variant.Classical.Typed.Context.Properties
open import Verification.Core.Data.Language.HindleyMilner.Variant.Classical.Typed.Definition

open import Verification.Core.Order.Preorder



record CtxTypingInstance {Œºs k} {Q : ‚ÑíHMQuant k} (Œì : ‚ÑíHMCtx Q Œºs) (te : Untyped‚ÑíHM k) : ùí∞‚ÇÄ where
  constructor _/_‚ä©_,_,_,_
  field metas : ‚ÑíHMTypes
  field typeMetas : ‚ÑíHMTypes
  field ctx : ‚ÑíHMCtx Q (metas) --  ‚äî typeMetas)
  field typ : ‚ÑíHMType (‚ü® metas ‚äî typeMetas ‚ü©)
  field isInstance : Œì <Œì ctx
  -- field hiddenEpiSub : Œºs ‚ü∂ metas
  -- field hiddenEpiSubProof : hiddenEpiSub ‚óÜ Œπ‚ÇÄ ‚àº (isInstance .fst)
  field hasType : isTyped‚ÑíHM (metas ‚äî typeMetas ‚ä© (ctx ‚áÉ[ Œπ‚ÇÄ ]‚áÇ·∂ú) ‚ä¢ typ) te

open CtxTypingInstance public



module _ {Œºs k} {Q : ‚ÑíHMQuant k} {Œì : ‚ÑíHMCtx Q Œºs} {te : Untyped‚ÑíHM k}  where
  record _<TI_ (ùëá : CtxTypingInstance Œì te) (ùëÜ : CtxTypingInstance Œì te) : ùí∞‚ÇÄ where
    field tiSub‚Çê : metas ùëá ‚ü∂ metas ùëÜ
    field tiSub‚Çì : typeMetas ùëá ‚ü∂ metas ùëÜ ‚äî typeMetas ùëÜ
    field typProof : typ ùëá ‚áÉ[ ‚¶ó tiSub‚Çê ‚óÜ Œπ‚ÇÄ , tiSub‚Çì ‚¶ò ]‚áÇ ‚â° typ ùëÜ
    field subProof : isInstance ùëá .fst ‚óÜ tiSub‚Çê ‚àº isInstance ùëÜ .fst

    ctxProofTI : ctx ùëá ‚áÉ[ tiSub‚Çê ]‚áÇ·∂ú ‚â° ctx ùëÜ
    ctxProofTI = ctx ùëá ‚áÉ[ tiSub‚Çê ]‚áÇ·∂ú  ‚ü® cong _‚áÉ[ tiSub‚Çê ]‚áÇ·∂ú (sym-Path (isInstance ùëá .snd)) ‚ü©-‚â°
                 Œì ‚áÉ[ fst (isInstance ùëá) ]‚áÇ·∂ú ‚áÉ[ tiSub‚Çê ]‚áÇ·∂ú  ‚ü® functoriality-‚óÜ-‚áÉ[]‚áÇ·∂ú {Œì = Œì} ‚ü©-‚â°
                 Œì ‚áÉ[ fst (isInstance ùëá) ‚óÜ tiSub‚Çê ]‚áÇ·∂ú  ‚ü® Œì ‚áÉ[‚âÄ subProof ‚âÄ]‚áÇ·∂ú ‚ü©-‚â°
                 Œì ‚áÉ[ fst (isInstance ùëÜ) ]‚áÇ·∂ú           ‚ü® isInstance ùëÜ .snd ‚ü©-‚â°
                 ctx ùëÜ ‚àé-‚â°

  open _<TI_ public


InitialCtxTypingInstance : ‚àÄ{Œºs k} -> {Q : ‚ÑíHMQuant k} -> (Œì : ‚ÑíHMCtx Q Œºs) (te : Untyped‚ÑíHM k) -> ùí∞‚ÇÄ
InitialCtxTypingInstance Œì te = ‚àë Œª (ùëá : CtxTypingInstance Œì te) -> ‚àÄ(ùëÜ : CtxTypingInstance Œì te) -> ùëá <TI ùëÜ

TypingDecision : ‚àÄ{Œºs k} -> {Q : ‚ÑíHMQuant k} -> (Œì : ‚ÑíHMCtx Q Œºs) (te : Untyped‚ÑíHM k) -> ùí∞‚ÇÄ
TypingDecision Œì te = (CtxTypingInstance Œì te -> ‚ä•-ùí∞ {‚Ñì‚ÇÄ}) + (InitialCtxTypingInstance Œì te)
