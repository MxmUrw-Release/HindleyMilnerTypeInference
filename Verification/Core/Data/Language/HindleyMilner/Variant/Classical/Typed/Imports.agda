
module Verification.Core.Data.Language.HindleyMilner.Variant.Classical.Typed.Imports where

-------------
-- Classes
open import Verification.Core.Set.Setoid.Definition public
open import Verification.Core.Order.Preorder public
open import Verification.Core.Set.Discrete public
open import Verification.Core.Algebra.Monoid.Definition public

-------------
-- Categories and unification
open import Verification.Core.Category.Std.Morphism.Iso public renaming (_โ_ to _โแต_ ; โจ_โฉโปยน to โจ_โฉโปยนแต)
open import Verification.Core.Category.Std.Morphism.Epi.Definition public
open import Verification.Core.Category.Std.Category.Subcategory.Full public
open import Verification.Core.Category.Std.Limit.Specific.Coequalizer public
-- open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Definition
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Definition using (append-โฆโฆ ; โฆโ_โโฆ) public
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Instance.Functor public
open import Verification.Core.Category.Std.Factorization.EpiMono.Variant.Split.Definition public
open import Verification.Core.Computation.Unification.Definition public

-------------
-- Lists
open import Verification.Core.Data.List.Variant.Unary.Definition public
open import Verification.Core.Data.List.Variant.Unary.Element public
open import Verification.Core.Data.List.Variant.Unary.Natural public
open import Verification.Core.Data.List.Variant.Binary.Definition public
open import Verification.Core.Data.List.Variant.Unary.Element public
open import Verification.Core.Data.List.Variant.Binary.Element.Definition public
open import Verification.Core.Data.List.Dependent.Variant.Unary.Definition public
open import Verification.Core.Data.List.Dependent.Variant.Binary.Definition public

-------------
-- Simple terms
open import Verification.Core.Theory.Std.Specific.FreeFiniteCoproductTheory.Param public
open import Verification.Core.Theory.Std.Specific.FreeFiniteCoproductTheory.Definition public
open import Verification.Core.Theory.Std.Specific.FreeFiniteCoproductTheory.Instance.Functor public
open import Verification.Core.Theory.Std.Specific.FreeFiniteCoproductTheory.Instance.RelativeMonad public
open import Verification.Core.Theory.Std.Specific.FreeFiniteCoproductTheory.Unification public

-------------
-- Types as simple terms
open import Verification.Core.Data.Language.HindleyMilner.Type.Variant.FreeFiniteCoproductTheoryTerm.Signature public
open import Verification.Core.Data.Language.HindleyMilner.Type.Variant.FreeFiniteCoproductTheoryTerm.Definition public

-------------
-- Other data

open import Verification.Core.Data.Product.Definition public
open import Verification.Core.Data.Sum.Definition public
open import Verification.Core.Data.Substitution.Variant.Base.Definition public


-------------
-- Specialized category modules
open Overwrite:isCategory:โง๐ฏโTerm ๐น public
open Overwrite:isCoproduct:โง๐ฏโTerm ๐น public
open Overwrite:hasCoproducts:โง๐ฏโTerm ๐น public
open Overwrite:hasFiniteCoproducts:โง๐ฏโTerm ๐น public
open Overwrite:hasInitial:โง๐ฏโTerm ๐น public
open Overwrite:isInitial:โง๐ฏโTerm ๐น public

-------------
-- Other specialized definitions

_โถ_ = Hom

_โ_ = _โแต_ {๐ = โง๐ฏโTerm ๐น} {{isCategory:โง๐๐ฎ๐๐ฌ๐ญ {T = ๐ฏโterm ๐น}}}
โจ_โฉโปยน = โจ_โฉโปยนแต {๐ = โง๐ฏโTerm ๐น} {{isCategory:โง๐๐ฎ๐๐ฌ๐ญ {T = ๐ฏโterm ๐น}}}

-- {-# DISPLAY isCoequalizer.ฯโ _ = ฯโ #-}
-- {-# DISPLAY isCoproduct.ฮนโ _ = ฮนโ #-}
-- {-# DISPLAY isCoproduct.ฮนโ _ = ฮนโ #-}
{-# DISPLAY _ๅโ-โง๐๐ฎ๐๐ฌ๐ญ_ f g = f โ g #-}
{-# DISPLAY ๅid-โง๐๐ฎ๐๐ฌ๐ญ = id #-}


instance
  hasSplitEpiMonoFactorization:โHMTypes : hasSplitEpiMonoFactorization โHMTypes
  hasSplitEpiMonoFactorization:โHMTypes = {!!}





--------------------------------------
-- NOTE
-- This is code copied from:
--   module Verification.Core.Category.Std.Limit.Specific.Coproduct.Properties.Monoidal where
-- It is unclear why instantiation does
-- not work here.
--

-------------
-- BEGIN DUPLICATE CODE
--

open import Verification.Conventions hiding (_โ_)

byExpand-ฮนโ,ฮนโ : โ{a b c : โHMTypes} -> {f g : a โ b โถ c}
                  -> ฮนโ โ f โผ ฮนโ โ g
                  -> ฮนโ โ f โผ ฮนโ โ g
                  -> f โผ g
byExpand-ฮนโ,ฮนโ {f = f} {g} pโ pโ =
  f                   โจ expand-ฮนโ,ฮนโ โฉ-โผ
  โฆ ฮนโ โ f , ฮนโ โ f โฆ โจ โฆโ pโ , pโ โโฆ โฉ-โผ
  โฆ ฮนโ โ g , ฮนโ โ g โฆ โจ expand-ฮนโ,ฮนโ โปยน โฉ-โผ
  g                   โ

module assoc-l-โ' {a b c : โHMTypes} where

  f : (a โ b) โ c โถ a โ (b โ c)
  f = โฆ โฆ ฮนโ , ฮนโ โ ฮนโ โฆ , ฮนโ โ ฮนโ โฆ

  g : a โ (b โ c) โถ (a โ b) โ c
  g = โฆ ฮนโ โ ฮนโ , โฆ ฮนโ โ ฮนโ , ฮนโ โฆ โฆ

  lem-1a : ฮนโ โ (ฮนโ โ (f โ g)) โผ ฮนโ โ (ฮนโ โ id)
  lem-1a = ฮนโ โ (ฮนโ โ (f โ g))   โจ refl โ assoc-r-โ โฉ-โผ
            ฮนโ โ ((ฮนโ โ f) โ g)   โจ refl โ (reduce-ฮนโ โ refl) โฉ-โผ
            ฮนโ โ (_ โ g)          โจ assoc-r-โ โฉ-โผ
            (ฮนโ โ _) โ g          โจ reduce-ฮนโ โ refl โฉ-โผ
            ฮนโ โ g                โจ reduce-ฮนโ โฉ-โผ
            ฮนโ โ ฮนโ               โจ refl โ unit-r-โ โปยน โฉ-โผ
            ฮนโ โ (ฮนโ โ id)        โ

  lem-1b : ฮนโ โ (ฮนโ โ (f โ g)) โผ ฮนโ โ (ฮนโ โ id)
  lem-1b = ฮนโ โ (ฮนโ โ (f โ g))   โจ refl โ assoc-r-โ โฉ-โผ
            ฮนโ โ ((ฮนโ โ f) โ g)   โจ refl โ (reduce-ฮนโ โ refl) โฉ-โผ
            ฮนโ โ (_ โ g)          โจ assoc-r-โ โฉ-โผ
            (ฮนโ โ _) โ g          โจ reduce-ฮนโ โ refl โฉ-โผ
            (ฮนโ โ ฮนโ) โ g         โจ assoc-l-โ โฉ-โผ
            ฮนโ โ (ฮนโ โ g)         โจ refl โ reduce-ฮนโ โฉ-โผ
            ฮนโ โ _                โจ reduce-ฮนโ โฉ-โผ
            ฮนโ โ ฮนโ               โจ refl โ unit-r-โ โปยน โฉ-โผ
            ฮนโ โ (ฮนโ โ id)        โ

  lem-1c : ฮนโ โ (f โ g) โผ ฮนโ โ id
  lem-1c = ฮนโ โ (f โ g)          โจ assoc-r-โ โฉ-โผ
            (ฮนโ โ f) โ g          โจ reduce-ฮนโ โ refl โฉ-โผ
            (ฮนโ โ ฮนโ) โ g         โจ assoc-l-โ โฉ-โผ
            ฮนโ โ (ฮนโ โ g)         โจ refl โ reduce-ฮนโ โฉ-โผ
            ฮนโ โ _                โจ reduce-ฮนโ โฉ-โผ
            ฮนโ                    โจ unit-r-โ โปยน โฉ-โผ
            ฮนโ โ id               โ

  lem-1 : f โ g โผ id
  lem-1 = byExpand-ฮนโ,ฮนโ (byExpand-ฮนโ,ฮนโ lem-1a lem-1b) lem-1c

  lem-2a : ฮนโ โ (g โ f) โผ ฮนโ โ id
  lem-2a = ฮนโ โ (g โ f)          โจ assoc-r-โ โฉ-โผ
            (ฮนโ โ g) โ f          โจ reduce-ฮนโ โ refl โฉ-โผ
            (ฮนโ โ ฮนโ) โ f         โจ assoc-l-โ โฉ-โผ
            ฮนโ โ (ฮนโ โ f)         โจ refl โ reduce-ฮนโ โฉ-โผ
            ฮนโ โ _                โจ reduce-ฮนโ โฉ-โผ
            ฮนโ                    โจ unit-r-โ โปยน โฉ-โผ
            ฮนโ โ id               โ

  lem-2b : ฮนโ โ (ฮนโ โ (g โ f)) โผ ฮนโ โ (ฮนโ โ id)
  lem-2b = ฮนโ โ (ฮนโ โ (g โ f))   โจ refl โ assoc-r-โ โฉ-โผ
            ฮนโ โ ((ฮนโ โ g) โ f)   โจ refl โ (reduce-ฮนโ โ refl) โฉ-โผ
            ฮนโ โ (_ โ f)          โจ assoc-r-โ โฉ-โผ
            (ฮนโ โ _) โ f          โจ reduce-ฮนโ โ refl โฉ-โผ
            (ฮนโ โ ฮนโ) โ f         โจ assoc-l-โ โฉ-โผ
            ฮนโ โ (ฮนโ โ f)         โจ refl โ reduce-ฮนโ โฉ-โผ
            ฮนโ โ _                โจ reduce-ฮนโ โฉ-โผ
            ฮนโ โ ฮนโ               โจ refl โ unit-r-โ โปยน โฉ-โผ
            ฮนโ โ (ฮนโ โ id)        โ

  lem-2c : ฮนโ โ (ฮนโ โ (g โ f)) โผ ฮนโ โ (ฮนโ โ id)
  lem-2c = ฮนโ โ (ฮนโ โ (g โ f))   โจ refl โ assoc-r-โ โฉ-โผ
            ฮนโ โ ((ฮนโ โ g) โ f)   โจ refl โ (reduce-ฮนโ โ refl) โฉ-โผ
            ฮนโ โ (_ โ f)          โจ assoc-r-โ โฉ-โผ
            (ฮนโ โ _) โ f          โจ reduce-ฮนโ โ refl โฉ-โผ
            ฮนโ โ f                โจ reduce-ฮนโ โฉ-โผ
            ฮนโ โ ฮนโ               โจ refl โ unit-r-โ โปยน โฉ-โผ
            ฮนโ โ (ฮนโ โ id)        โ

  lem-2 : g โ f โผ id
  lem-2 = byExpand-ฮนโ,ฮนโ lem-2a (byExpand-ฮนโ,ฮนโ lem-2b lem-2c)

  Proof : (a โ b) โ c โ a โ (b โ c)
  Proof = f since record { inverse-โ = g ; inv-r-โ = lem-1 ; inv-l-โ = lem-2 }


module ยง-assoc-l-โ' where
  prop-1 : โ{a b c : โHMTypes} -> (ฮนโ โ ฮนโ) โ โจ assoc-l-โ'.Proof {a = a} {b} {c} โฉ โผ ฮนโ
  prop-1 = (ฮนโ โ ฮนโ) โ _  โจ assoc-l-โ โฉ-โผ
            ฮนโ โ (ฮนโ โ _)  โจ refl โ reduce-ฮนโ โฉ-โผ
            ฮนโ โ _         โจ reduce-ฮนโ โฉ-โผ
            ฮนโ             โ


assoc-l-โ-โHMTypes : โ{a b c : โHMTypes} -> (a โ b) โ c โ a โ (b โ c)
assoc-l-โ-โHMTypes {a} {b} {c} = assoc-l-โ'.Proof {a = a} {b} {c}

--
-- END DUPLICATE CODE
-------------

