
module Verification.Core.Data.Expr.Variant.List.Definition where

open import Verification.Conventions hiding (lookup ; ‚Ñï)
open import Verification.Core.Category.Std.Functor.Definition
open import Verification.Core.Data.FinR.Definition
open import Verification.Core.Data.Nat.Definition
open import Verification.Core.Data.AllOf.Sum
open import Verification.Core.Data.AllOf.List
open import Verification.Core.Data.Universe.Definition
open import Verification.Core.Data.Universe.Instance.Category
-- open import Verification.Core.Data.SourceCode.Variant.Tokenized.Definition

open import Verification.Core.Data.SourceCode.Variant.HaskellLike.Definition


data ListExpr·µò (X : ùí∞‚ÇÄ) : ùí∞‚ÇÄ where
  var : Text -> ListExpr·µò X
  hole : X -> ListExpr·µò X
  list : List (ListExpr·µò X) -> ListExpr·µò X
  annotation : Text -> ListExpr·µò X -> ListExpr·µò X

macro ListExpr = #structureOn ListExpr·µò


module _ {X : ùí∞‚ÇÄ} where
  mutual
    parseHorizontal : Vec (‚Ñï +-ùí∞ HaskellLikeSourceCode X) n -> Vec (List (ListExpr·µò X)) n
    parseHorizontal [] = []
    parseHorizontal (left x ‚à∑ xs) = [] ‚à∑ parseHorizontal xs
    parseHorizontal (just x ‚à∑ xs) = makeListExpr·µòs x ‚à∑ parseHorizontal xs

    parseVertical : Vec (HaskellLikeSourceCode X) n -> Vec (List (ListExpr·µò X)) n
    parseVertical [] = []
    parseVertical (x ‚à∑ xs) = makeListExpr·µòs x ‚à∑ parseVertical xs

    makeListExpr·µòs : HsCode X -> List (ListExpr·µò X)
    makeListExpr·µòs (hole x) = (hole x) ‚à∑ []
    makeListExpr·µòs (var x) = (var x) ‚à∑ []
    makeListExpr·µòs (newline x) = []
    makeListExpr·µòs (horizontal x) = pure-List (list (join-List ((Vec‚ÜíList (parseHorizontal x)))))
    makeListExpr·µòs (vertical _ x) = join-List ((Vec‚ÜíList (parseVertical x)))

    makeListExpr·µò : HsCode X -> (ListExpr·µò X)
    makeListExpr·µò x = list (makeListExpr·µòs x)

module _ {X : ùí∞‚ÇÄ} {{_ : IShow X}} where
  instance
    IShow:ListExpr·µò : IShow (ListExpr·µò X)
    IShow:ListExpr·µò = record { show = f }
      where
        mutual
          fs : List (ListExpr·µò X) -> Text
          fs [] = ""
          fs (x ‚à∑ xs) = f x <> " " <> fs xs

          f : ListExpr·µò X -> Text
          f (hole x) = show x
          f (var x) = show x
          f (list x) = "(" <> fs x <> ")"
          f (annotation t x) = "{" <> t <> "} " <> f x

module _ {X : ùí∞‚ÇÄ} where
  data ListExpr·µòLoc : (Œ≥ : ListExpr·µò X) -> ùí∞‚ÇÄ where
    hole : ‚àÄ{x : X} -> ListExpr·µòLoc (hole x)
    list : ‚àÄ{xs : List (ListExpr·µò X)} -> (i : Fin-R (length xs))
         -> ListExpr·µòLoc (lookup' xs i)
         -> ListExpr·µòLoc (list xs)


  makeListExpr·µòLoc : ‚àÄ{Œ≥ : HsCode X} -> HsLoc Œ≥ -> ListExpr·µòLoc (makeListExpr·µò Œ≥)
  makeListExpr·µòLoc {hole x‚ÇÅ} hole = list zero hole
  makeListExpr·µòLoc {horizontal x‚ÇÅ} (horizontal i x x‚ÇÇ) = {!!}
  makeListExpr·µòLoc {vertical x‚ÇÅ x‚ÇÇ} x = {!!}




