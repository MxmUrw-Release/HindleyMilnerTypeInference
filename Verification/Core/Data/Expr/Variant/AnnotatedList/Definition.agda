
module Verification.Core.Data.Expr.Variant.AnnotatedList.Definition where

open import Verification.Conventions hiding (lookup ; ‚Ñï)
open import Verification.Core.Category.Std.Functor.Definition
open import Verification.Core.Data.FinR.Definition
open import Verification.Core.Data.Nat.Definition
open import Verification.Core.Data.AllOf.Sum
open import Verification.Core.Data.AllOf.List
open import Verification.Core.Data.Universe.Definition
open import Verification.Core.Data.Universe.Instance.Category
-- open import Verification.Core.Data.SourceCode.Variant.Tokenized.Definition

open import Verification.Core.Data.SourceCode.Variant.HaskellLike.Definition

open import Verification.Core.Algebra.Pointed.Definition


data AListExprAnn : ùí∞‚ÇÄ where
  var·µó : AListExprAnn


data AListExpr·µò (A : ùêèùê≠ùêù‚ÇÄ) (X : ùí∞‚ÇÄ) : ùí∞‚ÇÄ where
  var : ‚ü® A ‚ü© -> Text -> AListExpr·µò A X
  hole : X -> AListExpr·µò A X
  list : ‚ü® A ‚ü© -> List (AListExpr·µò A X) -> AListExpr·µò A X
  -- annotation : Text -> AListExpr·µò A X -> AListExpr·µò A X

module _ (A :  ùêèùê≠ùêù‚ÇÄ) where
  macro AListExpr = #structureOn (AListExpr·µò A)


module _ {A :  ùêèùê≠ùêù‚ÇÄ} {X : ùí∞‚ÇÄ} where
  mutual
    parseHorizontal : Vec (‚Ñï +-ùí∞ HaskellLikeSourceCode X) n -> Vec (List (AListExpr·µò A X)) n
    parseHorizontal [] = []
    parseHorizontal (left x ‚à∑ xs) = [] ‚à∑ parseHorizontal xs
    parseHorizontal (just x ‚à∑ xs) = makeAListExpr·µòs x ‚à∑ parseHorizontal xs

    parseVertical : Vec (HaskellLikeSourceCode X) n -> Vec (List (AListExpr·µò A X)) n
    parseVertical [] = []
    parseVertical (x ‚à∑ xs) = makeAListExpr·µòs x ‚à∑ parseVertical xs

    makeAListExpr·µòs : HsCode X -> List (AListExpr·µò A X)
    makeAListExpr·µòs (hole x) = (hole x) ‚à∑ []
    makeAListExpr·µòs (var x) = (var pt x) ‚à∑ []
    makeAListExpr·µòs (newline x) = []
    makeAListExpr·µòs (horizontal x) = pure-List (list pt (join-List ((Vec‚ÜíList (parseHorizontal x)))))
    makeAListExpr·µòs (vertical _ x) = join-List ((Vec‚ÜíList (parseVertical x)))

    makeAListExpr·µò : HsCode X -> (AListExpr·µò A X)
    makeAListExpr·µò x = list pt (makeAListExpr·µòs x)

module _ {A :  ùêèùê≠ùêù‚ÇÄ} {X : ùí∞‚ÇÄ} {{_ : IShow X}} {{_ : IShow ‚ü® A ‚ü©}} where
  instance
    IShow:AListExpr·µò : IShow (AListExpr·µò A X)
    IShow:AListExpr·µò = record { show = f }
      where
        mutual
          fs : List (AListExpr·µò A X) -> Text
          fs [] = ""
          fs (x ‚à∑ xs) = f x <> " " <> fs xs

          f : AListExpr·µò A X -> Text
          f (hole x) = show x
          f (var ann x) = "{" <> show ann <> "} " <> show x
          f (list ann x) = "{" <> show ann <> "} " <> "(" <> fs x <> ")"


          -- f (annotation t x) = "{" <> t <> "} " <> f x


{-
module _ {A} {X : ùí∞‚ÇÄ} where
  data AListExpr·µòLoc : (Œ≥ : AListExpr·µò A X) -> ùí∞‚ÇÄ where
    hole : ‚àÄ{x : X} -> AListExpr·µòLoc (hole x)
    list : ‚àÄ{xs : List (AListExpr·µò A X)} -> (i : Fin-R (length xs))
         -> AListExpr·µòLoc (lookup' xs i)
         -> AListExpr·µòLoc (list xs)


  makeAListExpr·µòLoc : ‚àÄ{Œ≥ : HsCode X} -> HsLoc Œ≥ -> AListExpr·µòLoc (makeAListExpr·µò Œ≥)
  makeAListExpr·µòLoc {hole x‚ÇÅ} hole = list zero hole
  makeAListExpr·µòLoc {horizontal x‚ÇÅ} (horizontal i x x‚ÇÇ) = {!!}
  makeAListExpr·µòLoc {vertical x‚ÇÅ x‚ÇÇ} x = {!!}

-}

