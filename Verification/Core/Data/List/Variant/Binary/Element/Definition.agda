
module Verification.Core.Data.List.Variant.Binary.Element.Definition where

open import Verification.Core.Conventions hiding (‚Ñï)


open import Verification.Core.Set.Decidable
open import Verification.Core.Set.Setoid.Definition
open import Verification.Core.Set.Setoid.Free
open import Verification.Core.Algebra.Monoid.Definition

open import Verification.Core.Data.List.Variant.Binary.Definition
open import Verification.Core.Data.List.Variant.Binary.Instance.Setoid
open import Verification.Core.Data.List.Variant.Binary.Instance.Monoid

-- the element relation

-- [Definition]
-- | Let [..] be a type.
module _ {A : ùí∞ ùëñ} where

  -- |> The element relation [..] is defined similar to
  --    definition (?).
  data _‚àç_ : ‚ãÜList A -> A -> ùí∞ ùëñ where
    incl : ‚àÄ {x} -> incl x ‚àç x
    right-‚àç : ‚àÄ {a b x} -> b ‚àç x -> (a ‚ãÜ b) ‚àç x
    left-‚àç : ‚àÄ {a b x} -> a ‚àç x -> (a ‚ãÜ b) ‚àç x

-- //




-- [Hide]
module _ {A : ùí∞ ùëñ} where
  [_]·∂† : ‚ãÜList A -> ùí∞ ùëñ
  [_]·∂† as = ‚àë Œª a -> as ‚àç a

  left·∂† : ‚àÄ{as bs} -> [ as ]·∂† -> [ as ‚ãÜ bs ]·∂†
  left·∂† (a , p) = a , left-‚àç p

  right·∂† : ‚àÄ{as bs} -> [ bs ]·∂† -> [ as ‚ãÜ bs ]·∂†
  right·∂† (a , p) = a , right-‚àç p

-- //
