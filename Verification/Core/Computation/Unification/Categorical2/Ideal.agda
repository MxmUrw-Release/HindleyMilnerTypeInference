
module Verification.Core.Computation.Unification.Categorical2.Ideal where

open import Verification.Conventions
open import Verification.Core.Set.Setoid
open import Verification.Core.Order.Preorder
open import Verification.Core.Order.Lattice
open import Verification.Core.Order.WellFounded.Definition
open import Verification.Core.Data.Universe.Definition
open import Verification.Core.Data.Universe.Instance.Category
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Category.Sized.Definition
open import Verification.Core.Category.Std.Morphism.Epi.Definition
open import Verification.Core.Category.Std.Category.As.PtdCategory.Definition


-- module _ {ùëñ} {ùíû : ùí∞ _} {{_ : ùêèùê≠ùêùùêÇùêöùê≠ ùëñ on ùíû}} where
  -- UpFamily : (a : ùíû) -> ùí∞ _
  -- UpFamily a = ‚àÄ{b : ùíû} -> (a ‚ü∂ b) -> ùí∞ (ùëñ)



-- | Fix a category |ùíû| with zero morphisms for the remainder of this section. [][][]
module _ {ùëñ} {ùíû : ùí∞ _} {{_ : ùêèùê≠ùêùùêÇùêöùê≠ ùëñ on ùíû}} where
  -- |> We denote objects of |ùíû| usually simply by |a|, |b| or |c|.
  --   Most of the following statements are rather easy consequences
  --   of the definitions, and we mostly just give an informal sketch
  --   of the proof.
  -- | The idea of what we are doing here is fully present
  --   in \cite{UnifyForm:McBride:2000}. The difference is that
  --   we expand somewhat on the notions employed, in the hope that
  --   this makes the intuition behind the proof of the optimist's lemma
  --   a bit clearer: in our formalization that
  --   proof is reduced to a single chain of equational reasoning,
  --   requiring four steps.
  private variable a b c : ùíû

  -- [Definition]
  -- | Let [..] be a fixed object of |ùíû|. A subset of arrows, all with source |a|,
  --   is encoded by a type family [..]. We call such a family a /right ideal
  --   at/ |a| if the following two conditions hold:
  module _ (a : ùíû) (P : ‚àÄ{b : ùíû} -> (f : a ‚ü∂ b) -> ùí∞ ùëñ) where
  -- | {}[]
    record isIdeal·µ£ : ùí∞ ùëñ where
      -- | 1. Given any arrow |f| in this set, i.e. |P f| holds,
      --      then for any other arrow |g|, the composition |f ‚óÜ g|
      --      is still in this set.
      field ideal-r-‚óÜ : {f : a ‚ü∂ b} -> P f -> (g : b ‚ü∂ c) -> P (f ‚óÜ g)

      -- | 2. We further require that if two arrow are equal
      --      with regards to the equivalence relation,
      --      it cannot happen that one of them is in |P|
      --      while the other one is not.
      field transp-Ideal·µ£ : {f g : a ‚ü∂ b} -> (p : f ‚àº g) -> P f -> P g

    -- field ideal-pt : ‚àÄ{b} -> P {b} pt
    -- |: A /left ideal/ could be defined by reversing arrows.
    --    Since we only need ideals in the direction as defined above,
    --    we usually skip the qualifier and simply speak of ideals.

    open isIdeal·µ£ {{...}} public
  -- //

  -- [Hide]
  module _ (a : ùíû) where
    Ideal·µ£·µò = _ :& isIdeal·µ£ a
    macro Ideal·µ£ = #structureOn Ideal·µ£·µò

  -- //


  -- | {}[]
  module _ {a : ùíû} where

    -- [Definition]
    -- | We define an equivalence relation on ideals.
    --   Let [..] be two ideals at a.
    module _ (A B : Ideal·µ£ a) where
      -- |> We say that |A ‚àº B| [] if the following can be shown:
      record _‚àº-Ideal·µ£_ : ùí∞ (ùëñ) where
        constructor incl
        field ‚ü®_‚ü© : ‚àÄ(f : a ‚ü∂ b) -> ‚ü® A ‚ü© f ‚Üî ‚ü® B ‚ü© f
        -- |> That is, two ideals are to be considered equivalent
        --    if they contain the same arrows.

    -- //

    -- [Lemma]
    -- | This relation on ideals is indeed an equivalence relation.

    -- //

    -- [Proof]
    -- | Note that to prove |‚ü® A ‚ü© f ‚Üî ‚ü® B ‚ü© f|, one
    --   has to give two functions, one converting a proof of
    --   membership in |A| to a proof of membership in |B|,
    --   and one vice versa. Thus reflexivity is shown by the
    --   identity function, symmetry by switching the directions
    --   of the two given functions, and transitivity by composition.

    -- //

    open _‚àº-Ideal·µ£_ public
    -- _‚àº-Ideal·µ£_ : (A B : Ideal·µ£ a) -> ùí∞ _
    -- _‚àº-Ideal·µ£_ A B = ‚àÄ{b} -> (f : a ‚ü∂ b) -> ‚ü® A ‚ü© f ‚Üî ‚ü® B ‚ü© f

-- [Hide]
    private
      lem-1 : ‚àÄ{A : Ideal·µ£ a} -> A ‚àº-Ideal·µ£ A
      lem-1 = incl Œª f ‚Üí (id , id)

      lem-2 : ‚àÄ{A B : Ideal·µ£ a} -> A ‚àº-Ideal·µ£ B -> B ‚àº-Ideal·µ£ A
      lem-2 P = incl Œª f ‚Üí ‚ü® P ‚ü© f .snd , ‚ü® P ‚ü© f .fst

      lem-3 : ‚àÄ{A B C : Ideal·µ£ a} -> A ‚àº-Ideal·µ£ B -> B ‚àº-Ideal·µ£ C -> A ‚àº-Ideal·µ£ C
      lem-3 P Q = incl Œª f ‚Üí ‚ü® P ‚ü© f .fst ‚óÜ ‚ü® Q ‚ü© f .fst , ‚ü® Q ‚ü© f .snd ‚óÜ ‚ü® P ‚ü© f .snd


    instance
      isSetoid:Ideal·µ£ : isSetoid (Ideal·µ£ a)
      isSetoid:Ideal·µ£ = isSetoid:byDef (_‚àº-Ideal·µ£_) lem-1 lem-2 lem-3

    -- //



    -- [Definition]
    -- | We define a preorder on ideals.
    --   Let [..] be two ideals at a.
    module _ (A B : Ideal·µ£ a) where
      -- |> We say that |A ‚â§ B| [] if the following can be shown:
      record _‚â§-Ideal·µ£_ : ùí∞ (ùëñ) where
        constructor incl
        field ‚ü®_‚ü© : (f : a ‚ü∂ b) -> ‚ü® A ‚ü© f -> ‚ü® B ‚ü© f

    open _‚â§-Ideal·µ£_ public
    -- //

    -- [Lemma]
    -- | This relation on ideals is indeed a preorder.

    -- //

    -- [Proof]
    -- | Very similar to the proof of REF. Reflexivity and transitivity
    --   is shown using the identity function and composition of functions.
    --   The fact that |‚àº| is compatible with |‚â§| is also shown by composition.

    -- //

-- [Hide]
    reflexive-Ideal·µ£ : ‚àÄ{A : Ideal·µ£ a} -> A ‚â§-Ideal·µ£ A
    reflexive-Ideal·µ£ = incl Œª f P ‚Üí P

    _‚ü°-Ideal·µ£_ : ‚àÄ{A B C : Ideal·µ£ a} -> A ‚â§-Ideal·µ£ B -> B ‚â§-Ideal·µ£ C -> A ‚â§-Ideal·µ£ C
    _‚ü°-Ideal·µ£_ P Q = incl Œª f ‚Üí ‚ü® P ‚ü© f ‚óÜ ‚ü® Q ‚ü© f

    transp-‚â§-Ideal·µ£ : ‚àÄ{A B C D : Ideal·µ£ a} -> (A ‚àº B) -> (C ‚àº D) -> A ‚â§-Ideal·µ£ C -> B ‚â§-Ideal·µ£ D
    transp-‚â§-Ideal·µ£ p q r = incl Œª f ‚Üí ‚ü® p ‚ü© f .snd ‚óÜ ‚ü® r ‚ü© f ‚óÜ ‚ü® q ‚ü© f .fst

    instance
      isPreorder:Ideal·µ£ : isPreorder _ (Ideal·µ£ a)
      isPreorder:Ideal·µ£ = record
        { _‚â§_ = _‚â§-Ideal·µ£_
        ; reflexive = reflexive-Ideal·µ£
        ; _‚ü°_ = _‚ü°-Ideal·µ£_
        ; transp-‚â§ = transp-‚â§-Ideal·µ£
        }

      isPartialorder:Ideal·µ£ : isPartialorder (Ideal·µ£ a)
      isPartialorder:Ideal·µ£ = record { antisym = Œª p q ‚Üí incl Œª f ‚Üí ‚ü® p ‚ü© f , ‚ü® q ‚ü© f }


-- //
