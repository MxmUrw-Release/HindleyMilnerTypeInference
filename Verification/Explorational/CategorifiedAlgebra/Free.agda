
{-# OPTIONS --guardedness #-}

module Verification.Explorational.CategorifiedAlgebra.Free where

open import Verification.Conventions hiding (Path)
open import Verification.Core.Category.Std.Morphism.Iso
open import Verification.Core.Data.AllOf.Universe
open import Verification.Core.Data.AllOf.Product
open import Verification.Core.Data.AllOf.Sum



module _ (F : ùí∞‚ÇÄ -> ùí∞‚ÇÄ) where

  {-# NO_POSITIVITY_CHECK #-}
  data Free : ùí∞‚ÇÄ where
    next : F Free -> Free

  {-# NO_POSITIVITY_CHECK #-}
  record CoFree : ùí∞‚ÇÄ where
    coinductive
    field conext : F CoFree

  open CoFree public


List' : ùí∞‚ÇÄ -> ùí∞‚ÇÄ
List' X = Free (Œª A -> ‚ä§-ùí∞ + (X √ó A))


module _ {X : ùí∞‚ÇÄ} where
  œï : List X -> List' X
  œï [] = next nothing
  œï (x ‚à∑ xs) = next (right (x , (œï xs)))

  œà : List' X -> List X
  œà (next (left x)) = []
  œà (next (just (x , xs))) = x ‚à∑ œà xs


Equation = ùí∞‚ÇÄ √ó ùí∞‚ÇÄ -> ùí∞‚ÇÄ

Solution : Equation -> ùí∞ _
Solution Eq = ‚àë Œª (A : ùí∞‚ÇÄ -> ùí∞‚ÇÄ) -> ‚àÄ X -> A X ‚âÖ Eq (A X , X)


FreeSol : Equation -> (ùí∞‚ÇÄ -> ùí∞‚ÇÄ)
FreeSol Eq X = Free (Œª A' -> Eq (A' , X))


CoFreeSol : Equation -> (ùí∞‚ÇÄ -> ùí∞‚ÇÄ)
CoFreeSol Eq X = CoFree (Œª A' -> Eq (A' , X))

getSolution : (Eq : Equation) -> Solution Eq
getSolution Eq = A , lem-1
  where
    A : ùí∞‚ÇÄ -> ùí∞‚ÇÄ
    A = FreeSol Eq
    -- Free (Œª A' -> Eq (A' , X)) X
    -- A X = Free (Œª A' -> Eq (A' , X)) X

    f : (X : ùí∞‚ÇÄ) ‚Üí A X -> Eq (A X , X)
    f X (next x) = x

    g : (X : ùí∞‚ÇÄ) ‚Üí Eq (A X , X) -> A X
    g X e = next e

    lem-1 : (X : ùí∞‚ÇÄ) ‚Üí A X ‚âÖ Eq (A X , X)
    lem-1 X = f X since record { inverse-‚óÜ = g X ; inv-r-‚óÜ = Œª {i (next x) ‚Üí next x} ; inv-l-‚óÜ = refl }



getSolution2 : (Eq : Equation) -> Solution Eq
getSolution2 Eq = A , lem-1
  where
    A : ùí∞‚ÇÄ -> ùí∞‚ÇÄ
    A = CoFreeSol Eq
    -- Free (Œª A' -> Eq (A' , X)) X
    -- A X = Free (Œª A' -> Eq (A' , X)) X

    f : (X : ùí∞‚ÇÄ) ‚Üí A X -> Eq (A X , X)
    f X a = conext a
    -- X (next x) = x

    g : (X : ùí∞‚ÇÄ) ‚Üí Eq (A X , X) -> A X
    conext (g X a) = a

    lem-0 : ‚àÄ {X} -> ‚àÄ a -> g X (conext a) ‚â° a
    conext (lem-0 a i) = conext a

    lem-1 : (X : ùí∞‚ÇÄ) ‚Üí A X ‚âÖ Eq (A X , X)
    lem-1 X = f X since record { inverse-‚óÜ = g X ; inv-r-‚óÜ = funExt lem-0 ; inv-l-‚óÜ = refl }


--
-- the initial solution
--

prop-1 : Free (id-ùí∞) -> ‚ä•-ùí∞ {‚Ñì‚ÇÄ}
prop-1 (next x) = prop-1 x

prop-2 : CoFree id-ùí∞
conext prop-2 = prop-2




-- If a functor solves the equation Eq, then it is isomorphic to the free solution
-- this is not true!
-- module _ {Eq : Equation} where
--   prop-1 : ‚àÄ((F , FP) : Solution Eq) -> ‚àÄ X -> F X ‚âÖ FreeSol Eq X
--   prop-1 (F , FP) X = {!!}
--     where
--       f : F X -> FreeSol Eq X
--       f =
--         let f1 = ‚ü® FP X ‚ü©
--         in Œª x ‚Üí next {!!}


