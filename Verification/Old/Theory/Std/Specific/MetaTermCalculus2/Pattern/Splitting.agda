
module Verification.Experimental.Theory.Std.Specific.MetaTermCalculus2.Pattern.Splitting where

open import Verification.Experimental.Conventions hiding (Structure ; _‚äî_ ; extend)
open import Verification.Experimental.Algebra.Monoid.Definition
open import Verification.Experimental.Algebra.Monoid.Free
open import Verification.Experimental.Algebra.Monoid.Free.Element
open import Verification.Experimental.Order.Lattice hiding (‚ä•)
open import Verification.Experimental.Data.Universe.Everything
open import Verification.Experimental.Data.Product.Definition
open import Verification.Experimental.Theory.Std.Generic.TypeTheory.Definition
open import Verification.Experimental.Theory.Std.Generic.TypeTheory.Simple
open import Verification.Experimental.Theory.Std.Generic.TypeTheory.Simple.Judgement2
open import Verification.Experimental.Theory.Std.TypologicalTypeTheory.CwJ.Kinding
open import Verification.Experimental.Theory.Std.Generic.TypeTheory.Simple
open import Verification.Experimental.Theory.Std.Specific.MetaTermCalculus2.Pattern.Definition

open import Verification.Experimental.Category.Std.Category.Definition
open import Verification.Experimental.Category.Std.Category.Opposite
open import Verification.Experimental.Category.Std.Category.Opposite.Instance.Monoid
open import Verification.Experimental.Category.Std.Category.Instance.Category
open import Verification.Experimental.Category.Std.Category.Structured.Monoidal.Definition
open import Verification.Experimental.Category.Std.Functor.Definition
open import Verification.Experimental.Category.Std.RelativeMonad.Definition
open import Verification.Experimental.Category.Std.RelativeMonad.KleisliCategory.Definition
open import Verification.Experimental.Category.Std.Category.Subcategory.Definition
open import Verification.Experimental.Category.Std.Morphism.EpiMono
open import Verification.Experimental.Category.Std.Limit.Specific.Coproduct.Preservation.Definition
open import Verification.Experimental.Category.Std.Limit.Specific.Coproduct.Definition

open import Verification.Experimental.Data.Universe.Everything
open import Verification.Experimental.Data.Universe.Instance.FiniteCoproductCategory
open import Verification.Experimental.Data.Indexed.Definition
open import Verification.Experimental.Data.Indexed.Instance.Monoid
open import Verification.Experimental.Data.FiniteIndexed.Definition
open import Verification.Experimental.Data.Indexed.Instance.FiniteCoproductCategory
open import Verification.Experimental.Data.Renaming.Definition
open import Verification.Experimental.Data.Renaming.Instance.CoproductMonoidal
open import Verification.Experimental.Data.Substitution.Definition
open import Verification.Experimental.Data.MultiRenaming.Definition
open import Verification.Experimental.Data.MultiRenaming.Instance.FiniteCoproductCategory
open import Verification.Experimental.Data.MultiRenaming.Shift

open import Verification.Experimental.Category.Std.Category.Opposite
open import Verification.Experimental.Category.Std.Category.Subcategory.Full
open import Verification.Experimental.Category.Std.Category.Subcategory.Definition
open import Verification.Experimental.Category.Std.Fibration.GrothendieckConstruction.Op.Definition
open import Verification.Experimental.Category.Std.Fibration.GrothendieckConstruction.Op.Instance.FiniteCoproductCategory

open import Verification.Experimental.Theory.Std.Specific.MetaTermCalculus2.Pattern.Factorization

module _ {K : Kinding ùëñ} {{_ : isMetaTermCalculus ùëñ K}} where

  -- private
  --   (Jdg‚ÇÇ ‚ü® K ‚ü©) : ùí∞ _
  --   (Jdg‚ÇÇ ‚ü® K ‚ü©) = Jdg‚ÇÇ ‚ü® K ‚ü©

  Splitter = Free-ùêåùê®ùêß (List (Jdg‚ÇÇ ‚ü® K ‚ü©))

  mutual
    getSplitter-inter : {Œì : List (Jdg‚ÇÇ ‚ü® K ‚ü©)} {Œî : Free-ùêåùê®ùêß (Jdg‚ÇÇ ‚ü® K ‚ü©)} {ùîç : Free-ùêåùê®ùêß (Jdg‚ÇÇ ‚ü® K ‚ü©)} -> (Œ£ : List (Jdg‚ÇÇ ‚ü® K ‚ü©)) -> Pat-inter Œì Œî ùîç -> Splitter
    getSplitter-inter Œ£ (incl {ùîç} {j ‚áí Œ±} x) = getSplitter-impl (Œ£ ‚ãÜ j) x
    getSplitter-inter Œ£ (tsx ‚ãÜ-‚ßú tsy) = getSplitter-inter Œ£ tsx ‚ãÜ getSplitter-inter Œ£ tsy
    getSplitter-inter Œ£ ‚óå-‚ßú = ‚óå

    getSplitter-impl : ‚àÄ{ùîç} {a : (Jdg‚ÇÇ ‚ü® K ‚ü©)} -> (List (Jdg‚ÇÇ ‚ü® K ‚ü©)) -> ùîç ‚ä©-inter a -> Splitter
    getSplitter-impl Œ£ (app-meta Œì Œ±) = incl Œ£
    getSplitter-impl Œ£ (app-var x ts) = getSplitter-inter Œ£ ts
    getSplitter-impl Œ£ (app-con x ts) = getSplitter-inter Œ£ ts

    getSplitter : ‚àÄ{ùîç} {a : (Jdg‚ÇÇ ‚ü® K ‚ü©)} -> ùîç ‚ä©-inter a -> Splitter
    getSplitter = getSplitter-impl []

  getObj : ‚àÄ{J : Free-ùêåùê®ùêß (Jdg‚ÇÇ ‚ü® K ‚ü©)} {i : (Jdg‚ÇÇ ‚ü® K ‚ü©)} -> (t : J ‚ä©·∂†-pat i) -> Free-ùêåùê®ùêß (Jdg‚ÇÇ ‚ü® K ‚ü©)
  getObj {J} {i} t = ŒΩ‚Çã (‚ü® ÂàÜ splitter ‚ü© start)
    where
      splitter = getSplitter (decompose t .snd .snd)

      start : ùêåùêÆùê•ùê≠ùê¢ùêëùêûùêß ‚ü® K ‚ü© (Jdg‚ÇÇ ‚ü® K ‚ü©)
      start = ŒΩ‚Çä (incl i)


  lem-10 : ‚àÄ{J : Free-ùêåùê®ùêß (Jdg‚ÇÇ ‚ü® K ‚ü©)} {i : (Jdg‚ÇÇ ‚ü® K ‚ü©)} -> (t : J ‚ä©·∂†-pat i) -> decompose t .fst ‚â£ getObj t
  lem-10 (app-meta M s) = refl-‚â£
  lem-10 (app-var x x‚ÇÅ) = {!!}
  lem-10 (app-con x x‚ÇÅ) = {!!}



