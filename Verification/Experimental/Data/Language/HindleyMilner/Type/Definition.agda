
module Verification.Experimental.Data.Language.HindleyMilner.Type.Definition where

open import Verification.Conventions hiding (lookup ; РёЋ)
open import Verification.Experimental.Set.Discrete
open import Verification.Experimental.Algebra.Monoid.Definition
open import Verification.Experimental.Algebra.Monoid.Free
open import Verification.Experimental.Data.Nat.Free
open import Verification.Experimental.Data.AllOf.Sum
open import Verification.Experimental.Data.Universe.Everything

open import Verification.Experimental.Theory.Std.Specific.ProductTheory.Module
open import Verification.Experimental.Theory.Std.Specific.ProductTheory.Instance.hasBoundaries

ProductTheoryData = ­ЮЋІ├Ќ.ух▒.­Юњю


-------------------------------------------------
-- Definition of the data for the HM types

data ­Юњ╣Рѓђ : ­Юњ░Рѓђ where
  tyрхЌ : ­Юњ╣Рѓђ

instance
  isDiscrete:­Юњ╣Рѓђ : isDiscrete ­Юњ╣Рѓђ
  isDiscrete:­Юњ╣Рѓђ = record { _РЅЪ-Str_ = lem-1 }
    where
      lem-1 : (a b : ­Юњ╣Рѓђ) Рєњ Decision (a РЅА-Str b)
      lem-1 tyрхЌ tyрхЌ = yes refl-РЅБ

data ­Юњ╣РѓЂ : List ­Юњ╣Рѓђ Рєњ ­Юњ╣Рѓђ Рєњ ­Юњ░ РёЊРѓђ where
  РЄњрхЌ : ­Юњ╣РѓЂ (tyрхЌ Рѕи tyрхЌ Рѕи []) tyрхЌ
  РёЋрхЌ : ­Юњ╣РѓЂ [] tyрхЌ
  ­Юћ╣рхЌ : ­Юњ╣РѓЂ [] tyрхЌ

instance
  isDiscrete:­Юњ╣РѓЂ : Рѕђ{xs : List ­Юњ╣Рѓђ} {x : ­Юњ╣Рѓђ} -> isDiscrete (­Юњ╣РѓЂ xs x)
  isDiscrete:­Юњ╣РѓЂ {xs} {x} = record { _РЅЪ-Str_ = lem-1 }
    where
      lem-1 : (a b : ­Юњ╣РѓЂ xs x) Рєњ Decision (a РЅА-Str b)
      lem-1 РЄњрхЌ РЄњрхЌ = yes refl-РЅБ
      lem-1 РёЋрхЌ РёЋрхЌ = yes refl-РЅБ
      lem-1 РёЋрхЌ ­Юћ╣рхЌ = no (╬╗ ())
      lem-1 ­Юћ╣рхЌ РёЋрхЌ = no (╬╗ ())
      lem-1 ­Юћ╣рхЌ ­Юћ╣рхЌ = yes refl-РЅБ

instance
  isSet:­Юњ╣Рѓђ : isSet-Str (­Юњ╣Рѓђ)
  isSet:­Юњ╣Рѓђ = {!!}

­Юњ╣ : ProductTheoryData _
­Юњ╣ = record { Sort = ­Юњ╣Рѓђ ; Con = ­Юњ╣РѓЂ }






