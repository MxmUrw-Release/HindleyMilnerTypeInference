
module Verification.Experimental.Data.MultiRenaming.Definition where

open import Verification.Conventions

open import Verification.Experimental.Set.Setoid.Definition
open import Verification.Experimental.Category.Std.Category.Definition
open import Verification.Experimental.Category.Std.Functor.Definition
open import Verification.Experimental.Category.Std.Category.Instance.Category
open import Verification.Experimental.Category.Std.Functor.Instance.Category
open import Verification.Experimental.Category.Std.Natural.Definition
open import Verification.Experimental.Category.Std.Morphism.Iso
-- open import Verification.Experimental.Category.Std.Fibration.GrothendieckConstruction.Definition
open import Verification.Experimental.Category.Std.Fibration.GrothendieckConstruction.Op.Definition

open import Verification.Experimental.Algebra.Monoid.Definition
open import Verification.Experimental.Algebra.Monoid.Free
open import Verification.Experimental.Algebra.Monoid.Free.Element

open import Verification.Experimental.Data.Universe.Everything
open import Verification.Experimental.Data.FiniteIndexed.Definition
open import Verification.Experimental.Data.Indexed.Definition
open import Verification.Experimental.Data.Renaming.Definition
open import Verification.Experimental.Category.Std.Category.Subcategory.Full
open import Verification.Experimental.Category.Std.Category.Subcategory.Definition
open import Verification.Experimental.Category.Std.Morphism.EpiMono
open import Verification.Experimental.Category.Std.Category.Opposite


module _ {K : ­Юњ░ ­ЮЉќ} {L : ­Юњ░ ­ЮЉЌ} where

  РёЏ : ­Юњ░ _
  РёЏ = РЎ«­ЮљЉ­Юљъ­ЮљД L

  multiren : ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ K -> ­Юљѓ­Юљџ­ЮљГ _
  multiren a = ­Юљѕ­Юљ▒ (РѕЉ (РЪе a РЪЕ РѕЇ_)) (РёЏ рхњрхќРї»)
  macro ­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ = #structureOn multiren

  map-­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ : Рѕђ{a b : ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ K} -> (f : b РЪХ a) -> Functor (­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ a) (­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ b)
  map-­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ {a} {b} f = F since isFunctor:F
    where
      F : ­Юљѕ­Юљ▒ (РѕЉ (РЪе a РЪЕ РѕЇ_)) (РёЏ рхњрхќРї») -> ­Юљѕ­Юљ▒ (РѕЉ (РЪе b РЪЕ РѕЇ_)) (РёЏ рхњрхќРї»)
      F x = indexed ╬╗ (k , kp) Рєњ ix x (k , map f k kp)

      map-F : Рѕђ{x y : ­Юљѕ­Юљ▒ (РѕЉ (РЪе a РЪЕ РѕЇ_)) (РёЏ рхњрхќРї»)} -> (g : x РЪХ y) -> F x РЪХ F y
      map-F {x} {y} g = ╬╗ i Рєњ g _

      isFunctor:F : isFunctor _ _ F
      isFunctor.map isFunctor:F = map-F
      isFunctor.isSetoidHom:map isFunctor:F = {!!}
      isFunctor.functoriality-id isFunctor:F = {!!}
      isFunctor.functoriality-РЌє isFunctor:F = {!!}

  instance
    isFunctor:­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ : isFunctor (­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ K рхњрхќ) (­Юљѓ­Юљџ­ЮљГ _) ­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ
    isFunctor.map isFunctor:­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ = map-­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ
    isFunctor.isSetoidHom:map isFunctor:­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ = {!!}
    isFunctor.functoriality-id isFunctor:­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ = {!!}
    isFunctor.functoriality-РЌє isFunctor:­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ = {!!}

module _ (K : ­Юњ░ ­ЮЉќ) (L : ­Юњ░ ­ЮЉЌ) where
  MultiRen = Реірхњрхќ (­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ {K = K} {L = L})
  macro ­Юљї­Юљ«­ЮљЦ­ЮљГ­Юљб­ЮљЉ­Юљъ­ЮљД = #structureOn MultiRen






-- module _ {K : ­Юњ░ ­ЮЉќ} {L : ­Юњ░ ­ЮЉЌ} where

--   multiren : ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ K -> ­Юљѓ­Юљџ­ЮљГ _
--   multiren a = ­Юљѕ­Юљ▒ (РѕЉ (РЪе a РЪЕ РѕЇ_)) (РЎ«­ЮљЉ­Юљъ­ЮљД L)
--   macro ­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ = #structureOn multiren

--   map-­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ : Рѕђ{a b : ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ K} -> (f : b РЪХ a) -> Functor (­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ a) (­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ b)
--   map-­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ {a} {b} f = F since isFunctor:F
--     where
--       F : ­Юљѕ­Юљ▒ (РѕЉ (РЪе a РЪЕ РѕЇ_)) (РЎ«­ЮљЉ­Юљъ­ЮљД L) -> ­Юљѕ­Юљ▒ (РѕЉ (РЪе b РЪЕ РѕЇ_)) (РЎ«­ЮљЉ­Юљъ­ЮљД L)
--       F x = indexed ╬╗ (k , kp) Рєњ ix x (k , map f k kp)

--       map-F : Рѕђ{x y : ­Юљѕ­Юљ▒ (РѕЉ (РЪе a РЪЕ РѕЇ_)) (РЎ«­ЮљЉ­Юљъ­ЮљД L)} -> (g : x РЪХ y) -> F x РЪХ F y
--       map-F {x} {y} g = ╬╗ i Рєњ g _

--       isFunctor:F : isFunctor _ _ F
--       isFunctor.map isFunctor:F = map-F
--       isFunctor.isSetoidHom:map isFunctor:F = {!!}
--       isFunctor.functoriality-id isFunctor:F = {!!}
--       isFunctor.functoriality-РЌє isFunctor:F = {!!}

--   instance
--     isFunctor:­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ : isFunctor (­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ K рхњрхќ) (­Юљѓ­Юљџ­ЮљГ _) ­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ
--     isFunctor.map isFunctor:­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ = map-­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ
--     isFunctor.isSetoidHom:map isFunctor:­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ = {!!}
--     isFunctor.functoriality-id isFunctor:­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ = {!!}
--     isFunctor.functoriality-РЌє isFunctor:­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ = {!!}

-- module _ (K : ­Юњ░ ­ЮЉќ) (L : ­Юњ░ ­ЮЉЌ) where
--   MultiRen = Реі (­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ {K = K} {L = L})
--   macro ­Юљї­Юљ«­ЮљЦ­ЮљГ­Юљб­ЮљЉ­Юљъ­ЮљД = #structureOn MultiRen



