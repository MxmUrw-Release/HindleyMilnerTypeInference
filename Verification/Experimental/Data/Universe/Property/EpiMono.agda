
module Verification.Experimental.Data.Universe.Property.EpiMono where

open import Verification.Conventions

open import Verification.Experimental.Set.Setoid.Definition
open import Verification.Experimental.Category.Std.Category.Definition
open import Verification.Experimental.Category.Std.Morphism.Iso
open import Verification.Experimental.Category.Std.Morphism.EpiMono
open import Verification.Experimental.Data.Universe.Definition
open import Verification.Experimental.Data.Universe.Instance.Category
open import Verification.Experimental.Set.Function.Injective

module _ {A B : ùí∞ ùëñ} where
  construct-isMono-ùêîùêßùê¢ùêØ : ‚àÄ{f : A -> B} -> isInjective f -> isMono f
  isMono.cancel-mono (construct-isMono-ùêîùêßùê¢ùêØ p) Œ±f‚àºŒ≤f = Œª i a ‚Üí cancel-injective (Œª j -> Œ±f‚àºŒ≤f j a) i
    where instance _ = p

  destruct-isMono-ùêîùêßùê¢ùêØ : ‚àÄ{f : A -> B} -> isMono f -> isInjective f
  isInjective.cancel-injective (destruct-isMono-ùêîùêßùê¢ùêØ {f} p) {a} {b} fa‚àºfb = Œª i -> P‚ÇÅ i tt
    where
      instance _ = p

      Œ± : ‚ä§-ùí∞ {ùëñ} -> A
      Œ± = const a

      Œ≤ : ‚ä§-ùí∞ {ùëñ} -> A
      Œ≤ = const b

      P‚ÇÄ : Œ± ‚óÜ f ‚â° Œ≤ ‚óÜ f
      P‚ÇÄ = Œª i _ ‚Üí fa‚àºfb i

      P‚ÇÅ : Œ± ‚â° Œ≤
      P‚ÇÅ = cancel-mono P‚ÇÄ





