
module Verification.Experimental.Data.Real.Cauchy.Sequence where

open import Verification.Experimental.Conventions
open import Verification.Experimental.Data.Prop.Everything
open import Verification.Experimental.Data.Int.Definition

open import Verification.Experimental.Set.Setoid
open import Verification.Experimental.Algebra.Monoid
open import Verification.Experimental.Algebra.Group
open import Verification.Experimental.Algebra.Ring
open import Verification.Experimental.Algebra.Abelian.Definition
open import Verification.Experimental.Algebra.Ring.Ordered
open import Verification.Experimental.Algebra.Ring.Localization
open import Verification.Experimental.Algebra.Ring.Localization.Instance.Linearorder
open import Verification.Experimental.Algebra.Ring.Localization.Instance.OrderedRing
open import Verification.Experimental.Algebra.Field.Definition
open import Verification.Experimental.Order.Linearorder
open import Verification.Experimental.Order.Preorder
open import Verification.Experimental.Data.Rational.Definition
open import Verification.Experimental.Data.Rational.Inclusion

open AbelianMonoidNotation


record Sequence (A : ùí∞ ùëñ) : ùí∞ ùëñ where
  field ix : ‚Ñï -> A

open Sequence public

module _ {A : ùí∞ ùëñ} where
  instance
    Index-Notation:Sequence : Index-Notation (Sequence A) (const ‚Ñï) (Œª _ -> ‚ä§-ùí∞ {‚Ñì‚ÇÄ}) (const A)
    Index-Notation:Sequence = record { _‚åÑ_ = Œª x i ‚Üí ix x i }

  instance
    hasU:Sequence : hasU (Sequence A) _ _
    hasU:Sequence = hasU:Base (Sequence A)


record isRegular (x : Sequence ‚Ñö) : ùí∞‚ÇÄ where
  field reg : ‚àÄ(m n : ‚Ñï) -> ‚à£ ((x ‚åÑ m) + - (x ‚åÑ n)) ‚à£ < ‚üå(Œπ (suc m)) + ‚üå(Œπ (suc n))

Real·∂ú : ùí∞ _
Real·∂ú = _ :& isRegular

macro ‚Ñù·∂ú = #structureOn Real·∂ú

instance
  Index-Notation:Real·∂ú : Index-Notation (Real·∂ú) (const ‚Ñï) (Œª _ -> ‚ä§-ùí∞ {‚Ñì‚ÇÄ}) (const ‚Ñö)
  Index-Notation:Real·∂ú = record { _‚åÑ_ = Œª x i ‚Üí ix ‚ü® x ‚ü© i }

record _‚àº-‚Ñù·∂ú_ (x y : ‚Ñù·∂ú) : ùí∞‚ÇÄ where
  constructor incl
  field sim-‚Ñù·∂ú : ‚àÄ(n : ‚Ñï) -> ‚à£ (x ‚åÑ n) + - (y ‚åÑ n) ‚à£ < 2 ‚ãÖ ‚üå(Œπ (suc n))

open _‚àº-‚Ñù·∂ú_ public

private
  lem-1 : ‚àÄ{x : ‚Ñù·∂ú} -> x ‚àº-‚Ñù·∂ú x
  lem-1 = {!!}
  -- ‚ü® lem-1 ‚ü© n = {!!}

  lem-2 : ‚àÄ{x y : ‚Ñù·∂ú} -> x ‚àº-‚Ñù·∂ú y -> y ‚àº-‚Ñù·∂ú x
  lem-2 = {!!}

  lem-3 : ‚àÄ{x y z : ‚Ñù·∂ú} -> x ‚àº-‚Ñù·∂ú y -> y ‚àº-‚Ñù·∂ú z -> x ‚àº-‚Ñù·∂ú z
  lem-3 = {!!}

instance
  isSetoid:‚Ñù·∂ú : isSetoid ‚Ñù·∂ú
  isSetoid:‚Ñù·∂ú = setoid _‚àº-‚Ñù·∂ú_ lem-1 lem-2 lem-3

instance
  isMonoid:‚Ñù·∂ú : isMonoid ‚Ñù·∂ú
  isMonoid:‚Ñù·∂ú = {!!}

instance
  isGroup:‚Ñù·∂ú : isGroup ‚Ñù·∂ú
  isGroup:‚Ñù·∂ú = {!!}

instance
  isCommutative:‚Ñù·∂ú : isCommutative ‚Ñù·∂ú
  isCommutative:‚Ñù·∂ú = {!!}

instance
  isSemiring:‚Ñù·∂ú : isSemiring ‚Ñù·∂ú
  isSemiring:‚Ñù·∂ú = {!!}

instance
  isRing:‚Ñù·∂ú : isRing ‚Ñù·∂ú
  isRing:‚Ñù·∂ú = record {}

instance
  isField:‚Ñù·∂ú : isField ‚Ñù·∂ú
  isField:‚Ñù·∂ú = {!!}

instance
  isOrderedRing:‚Ñù·∂ú : isOrderedRing ‚Ñì‚ÇÄ ‚Ñù·∂ú
  isOrderedRing:‚Ñù·∂ú = {!!}

-- NOTE: this should actually be derived from ordered ring
instance
  isPreorder:‚Ñù·∂ú : isPreorder ‚Ñì‚ÇÄ ‚Ñù·∂ú
  isPreorder:‚Ñù·∂ú = {!!}


