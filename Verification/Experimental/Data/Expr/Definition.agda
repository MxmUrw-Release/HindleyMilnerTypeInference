
module Verification.Experimental.Data.Expr.Definition where

open import Verification.Conventions hiding (lookup ; РёЋ)

open import Verification.Experimental.Data.Universe.Everything
open import Verification.Experimental.Category.Std.Category.Definition
open import Verification.Experimental.Category.Std.Functor.Definition

open import Verification.Experimental.Category.Std.Monad.Definition
open import Verification.Experimental.Category.Std.RelativeMonad.Finitary.Definition
-- open import Verification.Experimental.Category.Std.Monad.KleisliCategory.Instance.Monoidal
open import Verification.Experimental.Category.Std.Monad.TypeMonadNotation
open import Verification.Experimental.Data.Substitution.Definition
open import Verification.Experimental.Data.Indexed.Definition
open import Verification.Experimental.Data.Indexed.Instance.Monoid
open import Verification.Experimental.Data.FiniteIndexed.Definition

open import Verification.Experimental.Algebra.Monoid.Free
open import Verification.Experimental.Algebra.Monoid.Free.Element
open import Verification.Experimental.Category.Std.Category.Subcategory.Full


data Exprрхў (B : ­Юњ░ ­ЮЉќ) (A : ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ (Ріц-­Юњ░ {­ЮЉќ})) : ­Юњ░ ­ЮЉќ where
  val : B -> Exprрхў B A
  var : Рѕђ{a} -> РЪе A РЪЕ РѕЇ a -> Exprрхў B A
  statements : List (Exprрхў B A) -> Exprрхў B A


{-

-- rel monad

data Exprрхў (B : ­Юњ░ ­ЮЉќ) (A : ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ (Ріц-­Юњ░ {­ЮЉќ})) : ­Юњ░ ­ЮЉќ where
  val : B -> Exprрхў B A
  var : Рѕђ{a} -> РЪе A РЪЕ РѕЇ a -> Exprрхў B A
  statements : List (Exprрхў B A) -> Exprрхў B A

module _ (B : ­Юњ░ ­ЮЉќ) where
  Expr : ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ Ріц-­Юњ░ -> ­Юљѕ­Юљ▒ (Ріц-­Юњ░ {­ЮЉќ}) (­Юљћ­ЮљД­Юљб­Юљ» ­ЮЉќ)
  Expr A = indexed (╬╗ i -> Exprрхў B A)


-}


{-
-- product theory

open import Verification.Experimental.Theory.Std.Specific.ProductTheory.Module

module _ {A : ­Юњ░ ­ЮЉќ} (a b : A) where
  data ­ЮЋІListРѓЂ : List A -> A -> ­Юњ░ ­ЮЉќ where
    []рхЌ : ­ЮЋІListРѓЂ [] a
    РѕирхЌ : ­ЮЋІListРѓЂ (b Рѕи a Рѕи []) a



module _ (B : ­Юњ░ ­ЮЉќ) where
  data ­ЮЋІExprРѓђ : ­Юњ░ ­ЮЉќ where
    тѕєрхЌ тЁерхЌ : ­ЮЋІExprРѓђ

  data ­ЮЋІExprРѓЂ : List ­ЮЋІExprРѓђ Рєњ ­ЮЋІExprРѓђ Рєњ ­Юњ░ ­ЮЉќ where
    val : B -> ­ЮЋІExprРѓЂ [] тЁерхЌ
    list : Рѕђ{a b} -> ­ЮЋІListРѓЂ тѕєрхЌ тЁерхЌ a b -> ­ЮЋІExprРѓЂ a b
    statements : ­ЮЋІExprРѓЂ (тѕєрхЌ Рѕи []) тЁерхЌ



  ­ЮЋІExpr : ProductTheory ­ЮЉќ
  Sort ­ЮЋІExpr = ­ЮЋІExprРѓђ
  isDiscrete:Sort ­ЮЋІExpr = {!!}
  isSet-Str:Sort ­ЮЋІExpr = {!!}
  Con ­ЮЋІExpr = ­ЮЋІExprРѓЂ
  isDiscrete:Con ­ЮЋІExpr = {!!}


-}



