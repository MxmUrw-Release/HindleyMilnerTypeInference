
module Verification.Experimental.Data.Nat.Free where

open import Verification.Experimental.Conventions renaming (‚Ñï to Nat)

open import Verification.Experimental.Set.Setoid
open import Verification.Experimental.Set.Discrete
open import Verification.Experimental.Algebra.Monoid
open import Verification.Experimental.Algebra.Monoid.Free.Definition


‰∫∫‚Ñï·µò : ùí∞‚ÇÄ
‰∫∫‚Ñï·µò = Free-ùêåùê®ùêß ‚ä§-ùí∞

macro ‰∫∫‚Ñï = #structureOn ‰∫∫‚Ñï·µò

Œπ-‰∫∫‚Ñï : Nat -> ‰∫∫‚Ñï
Œπ-‰∫∫‚Ñï zero = ‚óå
Œπ-‰∫∫‚Ñï (suc n) = incl tt ‚ãÜ Œπ-‰∫∫‚Ñï n

instance
  fromNat‰∫∫‚Ñï : HasFromNat ‰∫∫‚Ñï
  fromNat‰∫∫‚Ñï = record { Constraint = Œª _ ‚Üí ùüô-ùí∞ ; fromNat = Œª n -> Œπ-‰∫∫‚Ñï n }

‰∫∫List = Free-ùêåùê®ùêß

module _ {A : ùí∞ ùëñ} where
  [_]·∂† : Free-ùêåùê®ùêß A -> ùí∞ ùëñ
  [_]·∂† as = ‚àë Œª a -> as ‚àç a

  left·∂† : ‚àÄ{as bs} -> [ as ]·∂† -> [ as ‚ãÜ bs ]·∂†
  left·∂† (a , p) = a , left-‚àç p

  right·∂† : ‚àÄ{as bs} -> [ bs ]·∂† -> [ as ‚ãÜ bs ]·∂†
  right·∂† (a , p) = a , right-‚àç p



