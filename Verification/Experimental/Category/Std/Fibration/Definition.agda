
module Verification.Experimental.Category.Std.Fibration.Definition where

open import Verification.Experimental.Conventions
open import Verification.Experimental.Meta.Structure
open import Verification.Experimental.Set.Setoid.Definition
open import Verification.Experimental.Set.Set.Definition
open import Verification.Experimental.Set.Set.Instance.Category
open import Verification.Experimental.Category.Std.Category.Definition
open import Verification.Experimental.Category.Std.Functor.Definition
open import Verification.Experimental.Category.Std.Category.Opposite
open import Verification.Experimental.Category.Std.Category.Instance.Category
open import Verification.Experimental.Category.Std.Limit.Specific.Pullback

open import Verification.Experimental.Data.Universe.Definition
open import Verification.Experimental.Data.Universe.Everything

--
-- The definition of (Grothendieck) fibrations
-- (following the definition at https://ncatlab.org/nlab/show/Grothendieck+fibration)
--


-- private variable
  -- ‚Ñ¨ : Category ùëñ
  -- ‚Ñ∞ : Category ùëó
  -- e e‚ÇÄ e‚ÇÅ e‚ÇÇ : ‚ü® ‚Ñ∞ ‚ü©


-- module _  where
-- record FullSubsetoid (X : Setoid ùëñ) (œï : ‚ü® X ‚ü© -> ùí∞ ùëó) : ùí∞ ùëñ where
--   field 


isSetoid:FullSubsetoid : (X : Setoid ùëñ) {A : ùí∞ ùëó} (œï : A -> ‚ü® X ‚ü©) -> isSetoid _ A
isSetoid._‚àº'_ (isSetoid:FullSubsetoid X œï) = Œª a b -> œï a ‚àº œï b
isSetoid.isEquivRel:‚àº (isSetoid:FullSubsetoid X œï) = equivRel (incl refl) (Œª p -> incl (sym ‚ü® p ‚ü©)) (Œª p q -> incl (‚ü® p ‚ü© ‚àô ‚ü® q ‚ü©))

isContr-Std : (A : ùí∞ _) {{_ : Setoid ùëñ on A}} -> ùí∞ _
isContr-Std A = ‚àë Œª (a : A) -> ‚àÄ (b : A) -> a ‚àº b
-- ‚àÄ (a b : A) -> a ‚àº b


module _ (‚Ñ∞ : Category ùëó) (‚Ñ¨ : Category ùëñ) where
  module _ (p : Functor ‚Ñ∞ ‚Ñ¨) where

    module _ {e‚ÇÄ e‚ÇÅ e‚ÇÇ} (œï : e‚ÇÅ ‚ü∂ e‚ÇÄ) (œà : e‚ÇÇ ‚ü∂ e‚ÇÄ) (g : ‚ü® p ‚ü© e‚ÇÇ ‚ü∂ ‚ü® p ‚ü© e‚ÇÅ) (p : g ‚óÜ map œï ‚àº map œà) where

      record isCartesianLift (œá : e‚ÇÇ ‚ü∂ e‚ÇÅ) : ùí∞ (ùëó ÔΩ§ ùëñ) where
        field cartesianLiftFills : (œá ‚óÜ œï) ‚àº œà
        field cartesianLiftSection : map œá ‚àº g

      CartesianLift = _ :& isCartesianLift

    module _ {e‚ÇÄ e‚ÇÅ e‚ÇÇ} {œï : e‚ÇÅ ‚ü∂ e‚ÇÄ} {œà : e‚ÇÇ ‚ü∂ e‚ÇÄ} {g : ‚ü® p ‚ü© e‚ÇÇ ‚ü∂ ‚ü® p ‚ü© e‚ÇÅ} {p : g ‚óÜ map œï ‚àº map œà} where
      instance
        isSetoid:CartesianLift : isSetoid _ (CartesianLift œï œà g p)
        isSetoid:CartesianLift = isSetoid:FullSubsetoid ‚Ä≤(e‚ÇÇ ‚ü∂ e‚ÇÅ)‚Ä≤ ‚ü®_‚ü©

    record isCartesian {e‚ÇÅ e‚ÇÄ : ‚ü® ‚Ñ∞ ‚ü©} (œï : e‚ÇÅ ‚ü∂ e‚ÇÄ) : ùí∞ (ùëó ÔΩ§ ùëñ) where
      field uniqueCartesianLift : ‚àÄ{e‚ÇÇ} (œà : e‚ÇÇ ‚ü∂ e‚ÇÄ) (g : ‚ü® p ‚ü© e‚ÇÇ ‚ü∂ ‚ü® p ‚ü© e‚ÇÅ) (p : g ‚óÜ map œï ‚àº map œà) -> isContr-Std (CartesianLift œï œà g p)

    Cartesian : ‚àÄ(e‚ÇÅ e‚ÇÄ : ‚ü® ‚Ñ∞ ‚ü©) -> ùí∞ _
    Cartesian e‚ÇÅ e‚ÇÄ = (e‚ÇÅ ‚ü∂ e‚ÇÄ) :& isCartesian

  record isFibrationalLift (p : Functor ‚Ñ∞ ‚Ñ¨) {e b} (f : b ‚ü∂ ‚ü® p ‚ü© e) {e'} (œï : Cartesian p e' e) : ùí∞ ùëñ where
    field fibrationalLiftObjectSection : ‚ü® p ‚ü© e' ‚â° b
    field fibrationalLiftHomSection : transport (Œª i -> fibrationalLiftObjectSection i ‚ü∂ ‚ü® p ‚ü© e) (map ‚ü® œï ‚ü©) ‚àº f

  record isFibration (p : Functor ‚Ñ∞ ‚Ñ¨) : ùí∞ (ùëñ ÔΩ§ ùëó) where
    field liftCartesian : ‚àÄ{e : ‚ü® ‚Ñ∞ ‚ü©} {b : ‚ü® ‚Ñ¨ ‚ü©} (f : b ‚ü∂ ‚ü® p ‚ü© e) -> ‚àë Œª e' -> ‚àë Œª (œï : Cartesian p e' e) -> isFibrationalLift p f œï

  Fibration = _ :& isFibration


module _ {‚Ñ∞ : Category ùëó} {‚Ñ¨ : Category ùëñ} where

  module _ (p : Fibration ‚Ñ∞ ‚Ñ¨) (b : ‚ü® ‚Ñ¨ ‚ü©) where
    record isFiber (e : Obj ‚Ñ∞) : ùí∞ (ùëó ÔΩ§ ùëñ) where
      field isSectionFiber : ‚ü® p ‚ü© ‚ü® e ‚ü© ‚â° b

    open isFiber public

    Fiber = _ :& isFiber

  module _ {p : Fibration ‚Ñ∞ ‚Ñ¨} {b : ‚ü® ‚Ñ¨ ‚ü©} where

    private
      p' : Functor ‚Ñ∞ ‚Ñ¨
      p' = ‚Ä≤ ‚ü® p ‚ü© ‚Ä≤

    instance
      isCategory:Fiber : isCategory _ (Fiber p b)
      -- isCategory.Hom' isCategory:Fiber = Œª e‚ÇÄ e‚ÇÅ -> ‚àë Œª (œï : ‚ü® e‚ÇÄ ‚ü© ‚ü∂ ‚ü® e‚ÇÅ ‚ü©) -> ùüô-ùí∞
      isCategory.Hom' isCategory:Fiber = Œª e‚ÇÄ e‚ÇÅ -> ‚àë Œª (œï : ‚ü® e‚ÇÄ ‚ü© ‚ü∂ ‚ü® e‚ÇÅ ‚ü©) -> transport (Œª i -> isSectionFiber (of e‚ÇÄ) i ‚ü∂ isSectionFiber (of e‚ÇÅ) i) (map {{of p'}} œï) ‚àº id
      isCategory.isSetoid:Hom isCategory:Fiber = {!!}
      -- Œª {e‚ÇÄ} {e‚ÇÅ} -> isSetoid:FullSubsetoid (‚Ä≤ ‚ü® e‚ÇÄ ‚ü© ‚ü∂ ‚ü® e‚ÇÅ ‚ü© ‚Ä≤) fst
      isCategory.id isCategory:Fiber = {!!}
      isCategory._‚óÜ_ isCategory:Fiber = {!!}
      isCategory.unit-l-‚óÜ isCategory:Fiber = {!!}
      isCategory.unit-r-‚óÜ isCategory:Fiber = {!!}
      isCategory.unit-2-‚óÜ isCategory:Fiber = {!!}
      isCategory.assoc-l-‚óÜ isCategory:Fiber = {!!}
      isCategory.assoc-r-‚óÜ isCategory:Fiber = {!!}
      isCategory._‚óà_ isCategory:Fiber = {!!}

  -- Fiber : (p : Fibration ‚Ñ∞ ‚Ñ¨) -> Functor (‚Ñ¨ ·µí·µñ) (ùêÇùêöùê≠ _)
  -- Fiber p = F since {!!}
  --   where
  --     F : ‚ü® ‚Ñ¨ ‚ü© -> Category _
  --     F b = Fb since {!!}
  --       where
  --         Fb : ùí∞ _
  --         Fb = ‚àë Œª (e : ‚ü® ‚Ñ∞ ‚ü©) -> ‚ü® p ‚ü© e ‚â° b




