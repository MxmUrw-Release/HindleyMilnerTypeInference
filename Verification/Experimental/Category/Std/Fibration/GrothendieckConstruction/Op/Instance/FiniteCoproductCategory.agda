
module Verification.Experimental.Category.Std.Fibration.GrothendieckConstruction.Op.Instance.FiniteCoproductCategory where

open import Verification.Conventions hiding (_‚äî_)

open import Verification.Experimental.Set.Setoid.Definition
open import Verification.Experimental.Category.Std.Category.Definition
open import Verification.Experimental.Category.Std.Category.Opposite
open import Verification.Experimental.Category.Std.Functor.Definition
open import Verification.Experimental.Category.Std.Category.Instance.Category
open import Verification.Experimental.Category.Std.Functor.Instance.Category
open import Verification.Experimental.Category.Std.Natural.Definition
open import Verification.Experimental.Category.Std.Morphism.Iso
open import Verification.Experimental.Category.Std.Limit.Specific.Coproduct.Definition
open import Verification.Experimental.Category.Std.Limit.Specific.Product

open import Verification.Experimental.Category.Std.Fibration.GrothendieckConstruction.Op.Definition



module _ {ùíû : Category ùëñ} {F : Functor (ùíû ·µí·µñ) (ùêÇùêöùê≠ ùëó)}
         {{_ : hasProducts ùíû}} {{_ : ‚àÄ{c : ‚ü® ùíû ‚ü©} -> hasProducts (‚ü® F ‚ü© c)}}
  where

  private
    instance
      isCategory:F : ‚àÄ{b : ‚ü® ùíû ‚ü©} -> isCategory (‚ü® ‚ü® F ‚ü© b ‚ü©)
      isCategory:F {b} = of ‚ü® F ‚ü© b

    instance
      isSetoid:F : ‚àÄ{b : ‚ü® ùíû ‚ü©} {x y : ‚ü® ‚ü® F ‚ü© b ‚ü©} -> isSetoid (x ‚ü∂ y)
      isSetoid:F {b} = isSetoid:Hom {{of ‚ü® F ‚ü© b}}

    instance
      isProduct:F : ‚àÄ{c : ‚ü® ùíû ‚ü©} -> {a b : ‚ü® ‚ü® F ‚ü© c ‚ü©} -> isProduct a b (a ‚äì b)
      isProduct:F = isProduct:‚äì

  infixl 80 _‚äì-‚®ä·µí·µñ_

  _‚äì-‚®ä·µí·µñ_ : ‚®ä·µí·µñ F -> ‚®ä·µí·µñ F -> ‚®ä·µí·µñ F
  _‚äì-‚®ä·µí·µñ_ a b = (base a ‚äì base b) , ‚ü® map œÄ‚ÇÄ ‚ü© (fib a) ‚äì ‚ü® map œÄ‚ÇÅ ‚ü© (fib b)

  module _ {a b : ‚®ä·µí·µñ F} where
    œÄ‚ÇÄ-‚®ä·µí·µñ : a ‚äì-‚®ä·µí·µñ b ‚ü∂ a
    œÄ‚ÇÄ-‚®ä·µí·µñ = œÄ‚ÇÄ , œÄ‚ÇÄ


module _ {ùíû : Category ùëñ} {F : Functor (ùíû ·µí·µñ) (ùêÇùêöùê≠ ùëó)}
         {{_ : hasCoproducts ùíû}} {{_ : ‚àÄ{c : ‚ü® ùíû ‚ü©} -> hasCoproducts (‚ü® F ‚ü© c)}}
  where

  infixl 80 _‚äî-‚®ä·µí·µñ_

  _‚äî-‚®ä·µí·µñ_ : ‚®ä·µí·µñ F -> ‚®ä·µí·µñ F -> ‚®ä·µí·µñ F
  _‚äî-‚®ä·µí·µñ_ a b = (base a ‚äî base b) , {!!}
  -- ‚ü® map œÄ‚ÇÄ ‚ü© (fib a) ‚äî ‚ü® map œÄ‚ÇÅ ‚ü© (fib b)

  -- module _ {a b : ‚®ä·µí·µñ F} where
  --   Œπ‚ÇÄ-‚®ä·µí·µñ : a ‚ü∂ a ‚äî-‚®ä·µí·µñ b
  --   Œπ‚ÇÄ-‚®ä·µí·µñ = {!!} , {!!}
  instance
    hasCoproducts:‚®ä·µí·µñ : hasCoproducts ‚Ä≤(‚®ä·µí·µñ F)‚Ä≤
    hasCoproducts:‚®ä·µí·µñ = {!!}

  instance
    hasFiniteCoproducts:‚®ä·µí·µñ : hasFiniteCoproducts ‚Ä≤(‚®ä·µí·µñ F)‚Ä≤
    hasFiniteCoproducts:‚®ä·µí·µñ = {!!}



