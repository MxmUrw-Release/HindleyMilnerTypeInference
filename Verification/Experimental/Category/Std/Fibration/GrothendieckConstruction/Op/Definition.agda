
module Verification.Experimental.Category.Std.Fibration.GrothendieckConstruction.Op.Definition where

open import Verification.Conventions

open import Verification.Experimental.Set.Setoid.Definition
open import Verification.Experimental.Category.Std.Category.Definition
open import Verification.Experimental.Category.Std.Category.Opposite
open import Verification.Experimental.Category.Std.Functor.Definition
open import Verification.Experimental.Category.Std.Category.Instance.Category
open import Verification.Experimental.Category.Std.Functor.Instance.Category
open import Verification.Experimental.Category.Std.Natural.Definition
open import Verification.Experimental.Category.Std.Morphism.Iso
-- open import Verification.Experimental.Category.Std.Natural.Instance.Category

record hasGrothendieckSumOp (A : ­Юњ░ ­ЮЉќ) (B : ­Юњ░ ­ЮЉЌ) : ­Юњ░ (­ЮЉќ №йц ­ЮЉЌ) where
  field Реірхњрхќ : A -> B

open hasGrothendieckSumOp {{...}} public

module _ {­Юњъ : Category ­ЮЉќ} where


  record Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ (F : Functor (­Юњъ рхњрхќ) (­Юљѓ­Юљџ­ЮљГ ­ЮЉЌ)) : ­Юњ░ ((­ЮЉќ Рїё 0) Ріћ (­ЮЉЌ Рїё 0)) where
    constructor _,_
    field base : РЪе ­Юњъ РЪЕ
    field fib : РЪе РЪе F РЪЕ base РЪЕ

  open Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ public

  instance
    hasGrothendieckSumOp:­Юљѓ­Юљџ­ЮљГ : hasGrothendieckSumOp (Functor (­Юњъ рхњрхќ) (­Юљѓ­Юљџ­ЮљГ ­ЮЉЌ)) _
    hasGrothendieckSumOp:­Юљѓ­Юљџ­ЮљГ = record { Реірхњрхќ = Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ }


  module _ {F : Functor (­Юњъ рхњрхќ) (­Юљѓ­Юљџ­ЮљГ ­ЮЉЌ)} where
    private
      instance
        isCategory:F : Рѕђ{b : РЪе ­Юњъ РЪЕ} -> isCategory (РЪе РЪе F РЪЕ b РЪЕ)
        isCategory:F {b} = of РЪе F РЪЕ b

      instance
        isSetoid:F : Рѕђ{b : РЪе ­Юњъ РЪЕ} {x y : РЪе РЪе F РЪЕ b РЪЕ} -> isSetoid (x РЪХ y)
        isSetoid:F {b} = isSetoid:Hom {{of РЪе F РЪЕ b}}

    record Hom-Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ (a b : Реірхњрхќ F) : ­Юњ░ ((­ЮЉќ Рїё 1) №йц (­ЮЉЌ Рїё 1)) where
      constructor _,_
      field base : base a РЪХ base b
      field fib : Hom (fib a) (РЪе map base РЪЕ (fib b))

    open Hom-Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ public

    module _ {a b : Реірхњрхќ F} where
      record _Рѕ╝-Hom-Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ_ (f g : Hom-Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ a b) : ­Юњ░ (­ЮЉќ Рїё 2 №йц ­ЮЉЌ Рїё 2) where
        constructor _,_
        field Рѕ╝-base : base f Рѕ╝ base g
        field Рѕ╝-fib : (fib f) РЌє (РЪе РЪе cong-Рѕ╝ Рѕ╝-base РЪЕ РЪЕ {_}) Рѕ╝ fib g


      instance
        isSetoid:Hom-Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ : isSetoid (Hom-Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ a b)
        isSetoid:Hom-Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ = setoid _Рѕ╝-Hom-Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ_ {!!} {!!} {!!}



    instance
      isCategory:Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ : isCategory (Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ F)
      isCategory.Hom isCategory:Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ          = Hom-Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ
      isCategory.isSetoid:Hom isCategory:Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ = isSetoid:Hom-Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ
      isCategory.id isCategory:Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ           = {!!}
      isCategory._РЌє_ isCategory:Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ          = {!!}
      isCategory.unit-l-РЌє isCategory:Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ     = {!!}
      isCategory.unit-r-РЌє isCategory:Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ     = {!!}
      isCategory.unit-2-РЌє isCategory:Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ     = {!!}
      isCategory.assoc-l-РЌє isCategory:Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ    = {!!}
      isCategory.assoc-r-РЌє isCategory:Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ    = {!!}
      isCategory._РЌѕ_ isCategory:Реірхњрхќ-­Юљѓ­Юљџ­ЮљГ          = {!!}



