
module Verification.Experimental.Category.Std.RelativeMonad.KleisliCategory.Definition where

open import Verification.Conventions

open import Verification.Experimental.Set.Setoid
open import Verification.Experimental.Category.Std.Category.Definition
open import Verification.Experimental.Category.Std.Functor.Definition
open import Verification.Experimental.Category.Std.Functor.Instance.Category
open import Verification.Experimental.Category.Std.Natural.Definition
open import Verification.Experimental.Category.Std.Category.Instance.Category
open import Verification.Experimental.Category.Std.RelativeMonad.Definition

module _ {ùíû : Category ùëñ} {ùíü : Category ùëó} where

  module _ {J : Functor ùíû ùíü}  where
    record RelativeKleisli (T : RelativeMonad J) : ùí∞ ùëñ where
      constructor incl
      field ‚ü®_‚ü© : ‚ü® ùíû ‚ü©
    open RelativeKleisli {{...}} public

    macro
      ùêëùêûùêäùê•ùê¨ : (T : RelativeMonad J) -> SomeStructure
      ùêëùêûùêäùê•ùê¨ T = #structureOn (RelativeKleisli T)

  module _ {J : Functor ùíû ùíü} {T : RelativeMonad J} where

    RelativeKleisliHom : (A B : ùêëùêûùêäùê•ùê¨ T) -> ùí∞ _
    RelativeKleisliHom = Hom-Base (Œª x y -> ‚ü® J ‚ü© ‚ü® x ‚ü© ‚ü∂ ‚ü® T ‚ü© ‚ü® y ‚ü©)

    module _ {A B : ùêëùêûùêäùê•ùê¨ T} where
      _‚àº-RelativeKleisliHom_ : (f g : RelativeKleisliHom A B) -> ùí∞ _
      _‚àº-RelativeKleisliHom_ = ‚àº-Base (Œª f g -> ‚ü® f ‚ü© ‚àº ‚ü® g ‚ü©)

      instance
        isSetoid:RelativeKleisliHom : isSetoid (RelativeKleisliHom A B)
        isSetoid._‚àº_ isSetoid:RelativeKleisliHom = _‚àº-RelativeKleisliHom_
        isSetoid.refl isSetoid:RelativeKleisliHom {a} = incl refl
        isSetoid.sym isSetoid:RelativeKleisliHom {a} {b} p = incl (sym ‚ü® p ‚ü©)
        isSetoid._‚àô_ isSetoid:RelativeKleisliHom {a} p q = incl $ ‚ü® p ‚ü© ‚àô ‚ü® q ‚ü©

    id-ùêëùêûùêäùê•ùê¨ : ‚àÄ{a : ùêëùêûùêäùê•ùê¨ T} -> RelativeKleisliHom a a
    id-ùêëùêûùêäùê•ùê¨ = incl repure

    infixl 50 _‚óÜ-ùêëùêûùêäùê•ùê¨_
    _‚óÜ-ùêëùêûùêäùê•ùê¨_ : ‚àÄ{a b c : ùêëùêûùêäùê•ùê¨ T} -> (RelativeKleisliHom a b) -> (RelativeKleisliHom b c) -> RelativeKleisliHom a c
    _‚óÜ-ùêëùêûùêäùê•ùê¨_ f g = incl (‚ü® f ‚ü© ‚óÜ reext ‚ü® g ‚ü©)

    private
      lem-1 : ‚àÄ{a b : ùêëùêûùêäùê•ùê¨ T} -> {f : RelativeKleisliHom a b} -> id-ùêëùêûùêäùê•ùê¨ ‚óÜ-ùêëùêûùêäùê•ùê¨ f ‚àº f
      lem-1 = incl reunit-l

      lem-2 : ‚àÄ{a b : ùêëùêûùêäùê•ùê¨ T} -> {f : RelativeKleisliHom a b} -> f ‚óÜ-ùêëùêûùêäùê•ùê¨ id-ùêëùêûùêäùê•ùê¨ ‚àº f
      lem-2 = incl ((refl ‚óà reunit-r) ‚àô unit-r-‚óÜ)

      lem-3 : ‚àÄ{a b c d : ùêëùêûùêäùê•ùê¨ T} {f : RelativeKleisliHom a b} {g : RelativeKleisliHom b c} {h : RelativeKleisliHom c d}
              -> (f ‚óÜ-ùêëùêûùêäùê•ùê¨ g) ‚óÜ-ùêëùêûùêäùê•ùê¨ h ‚àº f ‚óÜ-ùêëùêûùêäùê•ùê¨ (g ‚óÜ-ùêëùêûùêäùê•ùê¨ h)
      lem-3 {f = incl f} {incl g} {incl h} = incl P
        where
          P : (f ‚óÜ reext g) ‚óÜ reext h ‚àº f ‚óÜ (reext (g ‚óÜ reext h))
          P = (f ‚óÜ reext g) ‚óÜ reext h   ‚ü® assoc-l-‚óÜ ‚ü©-‚àº
              f ‚óÜ (reext g ‚óÜ reext h)   ‚ü® refl ‚óà reassoc ‚ü©-‚àº
              f ‚óÜ (reext (g ‚óÜ reext h)) ‚àé

    instance
      Category:RelativeKleisli : isCategory (RelativeKleisli T)
      isCategory.Hom Category:RelativeKleisli A B = RelativeKleisliHom A B
      isCategory.isSetoid:Hom Category:RelativeKleisli = it
      isCategory.id Category:RelativeKleisli         = incl repure
      isCategory._‚óÜ_ Category:RelativeKleisli        = _‚óÜ-ùêëùêûùêäùê•ùê¨_
      isCategory.unit-l-‚óÜ Category:RelativeKleisli   = lem-1
      isCategory.unit-r-‚óÜ Category:RelativeKleisli   = lem-2
      isCategory.unit-2-‚óÜ Category:RelativeKleisli   = lem-1
      isCategory.assoc-l-‚óÜ Category:RelativeKleisli  = lem-3
      isCategory.assoc-r-‚óÜ Category:RelativeKleisli  = (lem-3 ‚Åª¬π)
      isCategory._‚óà_ Category:RelativeKleisli        = {!!} -- Œª p q -> incl $ lem-4 ‚ü® p ‚ü© ‚ü® q ‚ü©



