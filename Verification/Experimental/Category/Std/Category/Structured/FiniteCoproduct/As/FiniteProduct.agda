
module Verification.Experimental.Category.Std.Category.Structured.FiniteCoproduct.As.FiniteProduct where

open import Verification.Conventions hiding (_Ріћ_)
open import Verification.Experimental.Set.Setoid
open import Verification.Experimental.Algebra.Monoid.Definition
open import Verification.Experimental.Category.Std.Category.Definition
open import Verification.Experimental.Category.Std.Category.Opposite
open import Verification.Experimental.Category.Std.Morphism.Iso
open import Verification.Experimental.Category.Std.Limit.Specific.Coproduct.Definition
open import Verification.Experimental.Category.Std.Limit.Specific.Coproduct.Instance.Product
open import Verification.Experimental.Category.Std.Limit.Specific.Product
-- open import Verification.Experimental.Category.Std.Category.Structured.FiniteCoproduct.Definition
-- open import Verification.Experimental.Category.Std.Category.Structured.FiniteProduct.Definition
-- open import Verification.Experimental.Category.Std.Category.Structured.FiniteProduct.As.Monoid


module _ {­Юњъ : Category ­ЮЉќ} {{_ : hasFiniteCoproducts ­Юњъ}} where
  instance
    hasFiniteProducts:рхњрхќ : hasFiniteProducts (­Юњъ рхњрхќ)
    hasFiniteProducts._РіЊ_ hasFiniteProducts:рхњрхќ = _Ріћ_
    hasFiniteProducts.isProduct:РіЊ hasFiniteProducts:рхњрхќ = it
    hasFiniteProducts.Ріц hasFiniteProducts:рхњрхќ = РіЦ
    hasFiniteProducts.isTerminal:Ріц hasFiniteProducts:рхњрхќ = it



