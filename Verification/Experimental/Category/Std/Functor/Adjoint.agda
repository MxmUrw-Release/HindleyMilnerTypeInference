
module Verification.Experimental.Category.Std.Functor.Adjoint where

open import Verification.Conventions

open import Verification.Experimental.Set.Setoid.Definition
open import Verification.Experimental.Category.Std.Category.Definition
open import Verification.Experimental.Category.Std.Functor.Definition

module _ {ùíû : Category ùëñ} {ùíü : Category ùëó} where
  record isAdjoint (F : Functor ùíû ùíü) (G : Functor ùíü ùíû) : ùí∞ (ùëñ ÔΩ§ ùëó) where
    field adj    : ‚àÄ{a : ‚ü® ùíü ‚ü©} -> ‚ü® F ‚ü© (‚ü® G ‚ü© a) ‚ü∂ a
    field coadj  : ‚àÄ{a : ‚ü® ùíû ‚ü©} -> a ‚ü∂ ‚ü® G ‚ü© (‚ü® F ‚ü© a)

  open isAdjoint {{...}} public


  module _ {F : Functor ùíû ùíü} {G : Functor ùíü ùíû} {{_ : isAdjoint F G}} where

    -- |> For any two objects [..] and [..],
    module _ {a : ‚ü® ùíû ‚ü©} {b : ‚ü® ùíü ‚ü©} where

      -- |> we have an isomorphism between hom-types as follows:
      free : (a ‚ü∂ ‚ü® G ‚ü© b) -> (‚ü® F ‚ü© a ‚ü∂ b)
      free f = map f ‚óÜ adj

      -- | The inverse direction is given by:
      cofree : (‚ü® F ‚ü© a ‚ü∂ b) -> (a ‚ü∂ ‚ü® G ‚ü© b)
      cofree f = coadj ‚óÜ map f










