
module Verification.Experimental.Category.Multi.Category.Free.Strict where

open import Verification.Conventions hiding (‚Ñï)
open import Verification.Experimental.Data.Fin.Definition
open import Verification.Experimental.Set.Finite.ReachableSubsets.Definition
open import Verification.Experimental.Category.Std.Category.Definition
open import Verification.Experimental.Data.Universe.Everything
open import Verification.Experimental.Data.Nat.Definition
open import Verification.Experimental.Order.Preorder
open import Verification.Experimental.Order.Lattice
open import Verification.Experimental.Algebra.Monoid.Definition

open import Verification.Experimental.Category.Multi.Graph.Definition
open import Verification.Experimental.Category.Multi.Category.Definition


module _ {A : ùí∞ _} {{_ : Monoid ùëñ on A}} where
  ‚≠ë_ : (ùîΩ ≥ n -> A) -> A
  ‚≠ë_ {zero} as = ‚óå
  ‚≠ë_ {suc n} as = as zero ‚ãÜ (‚≠ë (as ‚àò suc))


module _ {A : ‚Ñï} {B : ùîΩ ≥ A -> ‚Ñï} {C : ùí∞ ùëñ}where
  uncurry-ùîΩ ≥ : (‚àÄ(a : ùîΩ ≥ A) -> (b : ùîΩ ≥ (B a)) -> C) -> ‚àÄ (x : ùîΩ ≥ (‚≠ë B)) -> C
  uncurry-ùîΩ ≥ f x = {!!}

module _ (G : MultiGraph ùëñ) where
  data FreeHom·µê : {A : ùí∞‚ÇÄ} -> {{_ : isFinite A}} -> (A -> ‚ü® G ‚ü©) -> ‚ü® G ‚ü© -> ùí∞ (ùëñ ‚Å∫) where
    id·µê-Free : ‚àÄ{g : ‚ü® G ‚ü©} -> FreeHom·µê {ùîΩ ≥ 1} (const g) g
    Œπ·µê-Free : ‚àÄ{n : ‚Ñï} {o : Fin-R n -> ‚ü® G ‚ü©} {g : ‚ü® G ‚ü©} -> (Edge·µê o g)
              -> FreeHom·µê o g
    comp·µê-Free : ‚àÄ{A : ùí∞‚ÇÄ} -> {B : A -> ùí∞‚ÇÄ}
               -- the finiteness proofs
                  -> {{_ : isFinite A}} -> {{_ : ‚àÄ{a : A} -> isFinite (B a)}}
               -- the objects
                  -> {x : ‚ü® G ‚ü©} -> {y : A -> ‚ü® G ‚ü©} {z : ‚àÄ(a : A) -> B a -> ‚ü® G ‚ü©}
               -- the homs
                  -> FreeHom·µê y x
                  -> (‚àÄ{a : A} -> FreeHom·µê (z a) (y a))
                  -> FreeHom·µê (uncurry z) x


  data FreeHom·µê-‚Üì : {A : ùí∞‚ÇÄ} -> {{_ : isFinite A}} -> (A -> ‚ü® G ‚ü©) -> ‚ü® G ‚ü© -> ùí∞ (ùëñ ‚Å∫) where
    id·µê-Free : ‚àÄ{g : ‚ü® G ‚ü©} -> FreeHom·µê-‚Üì {ùîΩ ≥ 1} (const g) g
    comp·µê-Free : ‚àÄ{A : ùí∞‚ÇÄ} -> {B : A -> ùí∞‚ÇÄ}
               -- the finiteness proofs
                  -> {{_ : isFinite A}} -> {{_ : ‚àÄ{a : A} -> isFinite (B a)}}
               -- the objects
                  -> {x : ‚ü® G ‚ü©} -> {y : A -> ‚ü® G ‚ü©} {z : ‚àÄ(a : A) -> B a -> ‚ü® G ‚ü©}
               -- the homs
                  -> Edge·µê (y ‚àò fromFin) x
                  -> (‚àÄ{a : A} -> FreeHom·µê-‚Üì (z a) (y a))
                  -> FreeHom·µê-‚Üì (uncurry z) x




{-

  private
    module _ {n} {t : Fin-R n -> ‚ü® G ‚ü©} {h : ‚ü® G ‚ü©} where

      normalise : FreeHom·µê t h -> FreeHom·µê-‚Üì t h
      normalise id·µê-Free = id·µê-Free
      normalise (Œπ·µê-Free x) = {!!}
      normalise (comp·µê-Free id·µê-Free y) = {!!}
      normalise (comp·µê-Free (Œπ·µê-Free x) y) = comp·µê-Free x (Œª {a} -> {!!})
      normalise (comp·µê-Free (comp·µê-Free x x‚ÇÅ) y) = {!!}

-}
