
module Verification.Experimental.Theory.Std.Theory.Definition where

open import Verification.Experimental.Conventions
open import Verification.Experimental.Set.Setoid.Definition
-- open import Verification.Experimental.Set.Discrete
-- open import Verification.Experimental.Set.Decidable
-- open import Verification.Experimental.Data.Universe.Everything
-- open import Verification.Experimental.Data.Universe.Instance.Category
-- open import Verification.Experimental.Data.Prop.Everything
-- open import Verification.Experimental.Data.Sum.Definition
-- open import Verification.Experimental.Data.Rational.Definition
-- open import Verification.Experimental.Algebra.Monoid.Definition
-- open import Verification.Experimental.Category.Std.Category.Definition
-- open import Verification.Experimental.Category.Std.Morphism.Iso

#structure = #structureOn

record isTheory (­ЮЉќ : ­ЮћЈ ^ 2) (­ЮЊБ : ­Юњ░ ­ЮЉЌ) : ­Юњ░ (­ЮЉќ РЂ║ №йц ­ЮЉЌ) where
  constructor theory

  field _Рќархѕ : ­ЮЊБ -> Setoid ­ЮЉќ

  -------
  -- usual overloading of notation
  macro
    _Рќа : ­ЮЊБ -> SomeStructure
    _Рќа ¤ё = #structure РЪе(¤ё Рќархѕ)РЪЕ

  instance
    isSetoid:Рќа : Рѕђ{¤ё} -> isSetoid _ (¤ё Рќа)
    isSetoid:Рќа {¤ё} = of (¤ё Рќархѕ)

  -------
  -- fixities
  infix 80 _Рќа _Рќархѕ


open isTheory {{...}} public

Theory : (­ЮЉќ : ­ЮћЈ ^ 3) -> ­Юњ░ _
Theory ­ЮЉќ = (­Юњ░ (­ЮЉќ Рїё 0)) :& isTheory (­ЮЉќ Рїё 1 , ­ЮЉќ Рїё 2)

-- maps between theories

record isTheoryHom (­ЮЊб : Theory ­ЮЉќ) (­ЮЊБ : Theory ­ЮЉЌ) (F : РЪе ­ЮЊб РЪЕ -> РЪе ­ЮЊБ РЪЕ) : ­Юњ░ (­ЮЉќ №йц ­ЮЉЌ) where
  constructor theoryHom
  field map-Рќа : Рѕђ (¤Ћ : РЪе ­ЮЊб РЪЕ) -> SetoidHom (¤Ћ Рќа) (F ¤Ћ Рќа)

open isTheoryHom {{...}} public

TheoryHom : (­ЮЊб : Theory ­ЮЉќ) (­ЮЊБ : Theory ­ЮЉЌ) -> ­Юњ░ _
TheoryHom ­ЮЊб ­ЮЊБ = _ :& isTheoryHom ­ЮЊб ­ЮЊБ





