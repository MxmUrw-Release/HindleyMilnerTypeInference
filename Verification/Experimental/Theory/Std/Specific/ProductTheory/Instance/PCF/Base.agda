
module Verification.Experimental.Theory.Std.Specific.ProductTheory.Instance.PCF.Base where

open import Verification.Conventions hiding (Structure)

-- open import Verification.Experimental.Conventions hiding (Structure ; isSetoid:byPath)
open import Verification.Experimental.Set.Decidable
open import Verification.Experimental.Set.Discrete
open import Verification.Experimental.Algebra.Monoid.Definition
open import Verification.Experimental.Algebra.Monoid.Free
open import Verification.Experimental.Algebra.Monoid.Free.Element
-- open import Verification.Experimental.Order.Lattice
open import Verification.Experimental.Data.Universe.Everything -- hiding (isSetoid:Function)
open import Verification.Experimental.Data.Product.Definition
-- open import Verification.Experimental.Theory.Std.Generic.TypeTheory.Definition
-- open import Verification.Experimental.Theory.Std.Generic.TypeTheory.Simple
-- open import Verification.Experimental.Theory.Std.Generic.TypeTheory.Simple.Judgement2
-- open import Verification.Experimental.Theory.Std.TypologicalTypeTheory.CwJ.Kinding
-- open import Verification.Experimental.Theory.Std.Generic.TypeTheory.Simple
-- open import Verification.Experimental.Theory.Std.Specific.MetaTermCalculus2.Pattern.Definition

open import Verification.Experimental.Category.Std.Category.Definition
-- open import Verification.Experimental.Category.Std.Category.Structured.Monoidal.Definition
open import Verification.Experimental.Category.Std.Functor.Definition
open import Verification.Experimental.Category.Std.RelativeMonad.Definition
open import Verification.Experimental.Category.Std.RelativeMonad.KleisliCategory.Definition
open import Verification.Experimental.Category.Std.Category.Subcategory.Definition
open import Verification.Experimental.Category.Std.Morphism.EpiMono
open import Verification.Experimental.Category.Std.Morphism.Iso
open import Verification.Experimental.Category.Std.Limit.Specific.Coproduct.Definition
open import Verification.Experimental.Category.Std.Limit.Specific.Coequalizer.Definition
open import Verification.Experimental.Category.Std.Limit.Specific.Coequalizer.Property.Base
open import Verification.Experimental.Category.Std.Limit.Specific.Coequalizer.Reflection
-- open import Verification.Experimental.Category.Std.Limit.Specific.Coproduct.Preservation.Definition

open import Verification.Experimental.Order.WellFounded.Definition
open import Verification.Experimental.Order.Preorder 
open import Verification.Experimental.Order.Lattice hiding (‚ä•)

open import Verification.Experimental.Data.List.Definition
open import Verification.Experimental.Data.Nat.Free
open import Verification.Experimental.Data.Indexed.Definition
open import Verification.Experimental.Data.Indexed.Instance.Monoid
open import Verification.Experimental.Data.FiniteIndexed.Definition
open import Verification.Experimental.Data.Renaming.Definition
open import Verification.Experimental.Data.Renaming.Instance.CoproductMonoidal
open import Verification.Experimental.Data.Substitution.Definition
open import Verification.Experimental.Data.FiniteIndexed.Property.Merge

open import Verification.Experimental.Theory.Std.Generic.FormalSystem.Definition
open import Verification.Experimental.Theory.Std.Specific.ProductTheory.Definition
open import Verification.Experimental.Theory.Std.Specific.ProductTheory.Instance.FormalSystem

open import Verification.Experimental.Computation.Unification.Monoidic.PrincipalFamilyCat2


WF-ùïã√ó : ùí∞‚ÇÄ
WF-ùïã√ó = ‚Ñï ^ 3

macro ùí≤-ùïã√ó = #structureOn WF-ùïã√ó

postulate
  _‚â™-ùí≤-ùïã√ó_ : ùí≤-ùïã√ó -> ùí≤-ùïã√ó -> ùí∞ ‚Ñì‚ÇÄ
  WellFounded-‚â™-ùí≤-ùïã√ó : WellFounded _‚â™-ùí≤-ùïã√ó_


instance
  isWellfounded:ùí≤-ùïã√ó : isWF {‚Ñì‚ÇÄ} ‚Ñì‚ÇÄ ùí≤-ùïã√ó
  isWellfounded:ùí≤-ùïã√ó = record { _‚â™_ = _‚â™-ùí≤-ùïã√ó_ ; wellFounded = WellFounded-‚â™-ùí≤-ùïã√ó }

instance
  isWFT:ùí≤-ùïã√ó : isWFT ùí≤-ùïã√ó
  isWFT:ùí≤-ùïã√ó = {!!}



module _ {ùë® : ùïã√ó ùëñ} where


  data isBase-ùïã√ó : ‚àÄ{x y : ùêÇùê≠ùê± ùë®} -> Pair x y -> ùí∞ ùëñ where
    isBase:‚ä• : ‚àÄ{x : ùêÇùê≠ùê± ùë®} -> {f g : ‚ä• ‚ü∂ x} -> isBase-ùïã√ó (f , g)
    isBase:sym : ‚àÄ{x y : ùêÇùê≠ùê± ùë®} -> {f g : x ‚ü∂ y} -> isBase-ùïã√ó (f , g) -> isBase-ùïã√ó (g , f)
    isBase:id : ‚àÄ{x y : ùêÇùê≠ùê± ùë®} -> {f : x ‚ü∂ y} -> isBase-ùïã√ó (f , f)
    isBase:var : ‚àÄ{s : Type ùë®} {Œì : ùêÇùê≠ùê± ùë®} (x y : ‚ü® Œì ‚ü© ‚àç s) -> (y ‚â†-‚àç x) -> isBase-ùïã√ó (incl (var x) , incl (var y))
    -- isBase:var-con : ‚àÄ{s : Type ùë®} {Œì : ùêÇùê≠ùê± ùë®} -> (x : ‚ü® Œì ‚ü© ‚àç s) -> (t : Œì ‚ä¢ s) -> isBase-ùïã√ó (incl (var x) , t)

  postulate
    size-ùïã√ó : ‚àÄ{a b : ùêÇùê≠ùê± ùë®} -> Pair a b -> ùí≤-ùïã√ó

  SplitP : IxC (ùêÇùê≠ùê± ùë®) -> IxC (ùêÇùê≠ùê± ùë®) -> ùí∞‚ÇÄ
  SplitP (_ , _ , i) = (Œª (_ , _ , j) -> size-ùïã√ó j ‚â™-ùí≤-ùïã√ó size-ùïã√ó i)


  decide-Base-ùïã√ó : ‚àÄ{a b : ùêÇùê≠ùê± ùë®} -> ‚àÄ(f g : a ‚ü∂ b) -> isBase-ùïã√ó (f , g) -> isDecidable (hasCoequalizer f g)
  decide-Base-ùïã√ó f g isBase:‚ä• = right hasCoequalizer:byInitial
  decide-Base-ùïã√ó f g (isBase:sym p) = {!!}
  decide-Base-ùïã√ó f .f isBase:id = {!!}
  decide-Base-ùïã√ó .(incl (var x)) .(incl (var y)) (isBase:var {s} {Œì} x y y‚â†x) = right lem-11
    where
      T : RelativeMonad (ùëìùëñùëõ (Type ùë®))
      T = ‚Ä≤ Term-ùïã√ó ùë® ‚Ä≤

      Œì' : ùêÇùê≠ùê± ùë®
      Œì' = incl (‚ü® Œì ‚ü© \\ x)

      œÄ' : Œπ Œì ‚ü∂ Œπ Œì'
      œÄ' = incl (‚ü® (œÄ-\\ x y y‚â†x) ‚ü© ‚óÜ repure)

      Œπ' : Œπ Œì' ‚ü∂ Œπ Œì
      Œπ' = incl (Œπ-\\ x ‚óÜ repure)


      lem-01 : ‚àÄ i z -> ‚ü® (map-Œπ-‚ßúùêíùêÆùêõùê¨ùê≠ (incl (var x))) ‚óÜ œÄ' ‚ü© i z ‚â° ‚ü® (map-Œπ-‚ßúùêíùêÆùêõùê¨ùê≠ (incl (var y))) ‚óÜ œÄ' ‚ü© i z
      lem-01 i incl = ‚â°-Str‚Üí‚â° (cong-Str var (œÄ-\\-‚àº y‚â†x))

      equate-œÄ‚Çå' : map-Œπ-‚ßúùêíùêÆùêõùê¨ùê≠ (incl (var x)) ‚óÜ œÄ' ‚àº map (incl (var y)) ‚óÜ œÄ'
      equate-œÄ‚Çå' = incl (Œª i -> funExt (lem-01 i))

      lem-08 : ‚àÄ{c : ùêíùêÆùêõùê¨ùê≠ T} -> (h : Œπ (Œì) ‚ü∂ c) -> (p : map (incl (var x)) ‚óÜ h ‚àº map (incl (var y)) ‚óÜ h)
               -> ‚àë Œª (Œæ : Œπ (Œì') ‚ü∂ c) -> œÄ' ‚óÜ Œæ ‚àº h
      lem-08 {c} h p = Œæ , P
        where
          Œæ : Œπ (Œì') ‚ü∂ c
          Œæ = Œπ' ‚óÜ h

          P-8 : ‚ü® h ‚ü© s x ‚â° ‚ü® h ‚ü© s y
          P-8 = funExt‚Åª¬π (‚ü® p ‚ü© s) incl

          P-9 : (i : Sort ùë®) (z : ‚ü® Œì ‚ü© ‚àç i) ‚Üí
                ‚ü® h ‚ü© i (Œπ-\\ x i (‚ü® œÄ-\\ x y y‚â†x ‚ü© i z))  ‚â°  ‚ü® h ‚ü© i z
          P-9 i z with merge-embed y‚â†x z
          ... | left x = cong (‚ü® h ‚ü© i) (‚â°-Str‚Üí‚â° x)
          ... | just refl-=-‚àç =
            ‚ü® h ‚ü© i (Œπ-\\ z i (‚ü® œÄ-\\ z y y‚â†x ‚ü© i z))  ‚ü® cong (‚ü® h ‚ü© i) (‚â°-Str‚Üí‚â° (merge-single y‚â†x)) ‚ü©-‚â°
            ‚ü® h ‚ü© i y                                  ‚ü® sym-Path P-8 ‚ü©-‚â°
            ‚ü® h ‚ü© i z                                  ‚àé-‚â°

          P : œÄ' ‚óÜ (Œπ' ‚óÜ h) ‚àº h
          P = incl (Œª i -> funExt (P-9 i))

      cancel-epi-œÄ' : ‚àÄ{z : ùêíùêÆùêõùê¨ùê≠ T} -> {f g : Œπ Œì' ‚ü∂ z} -> (œÄ' ‚óÜ f ‚àº œÄ' ‚óÜ g) -> f ‚àº g
      cancel-epi-œÄ' {z} {f} {g} p = incl Œª i -> funExt (P-9 i)
        where
          P-8 : ‚àÄ (i : Sort ùë®) (z : ‚ü® Œì' ‚ü© ‚àç i) ->  ‚ü® f ‚ü© i (‚ü® œÄ-\\ x y y‚â†x ‚ü© i (Œπ-\\ x i z)) ‚â° ‚ü® g ‚ü© i (‚ü® œÄ-\\ x y y‚â†x ‚ü© i (Œπ-\\ x i z))
          P-8 i z = funExt‚Åª¬π (‚ü® p ‚ü© i) (Œπ-\\ x i z)

          P-9 : ‚àÄ (i : Sort ùë®) (z : ‚ü® Œì' ‚ü© ‚àç i) -> ‚ü® f ‚ü© i z ‚â° ‚ü® g ‚ü© i z
          P-9 i z = _ ‚ü® sym-Path (cong (‚ü® f ‚ü© i) (‚â°-Str‚Üí‚â° (embed-merge y‚â†x z))) ‚ü©-‚â°
                    _ ‚ü® P-8 i z ‚ü©-‚â°
                    _ ‚ü® (cong (‚ü® g ‚ü© i) (‚â°-Str‚Üí‚â° (embed-merge y‚â†x z))) ‚ü©-‚â°
                    _ ‚àé-‚â°

      lem-09 : isEpi (œÄ')
      lem-09 = epi cancel-epi-œÄ'


      lem-10 : isCoequalizer (map (incl (var x))) (map (incl (var y))) (Œπ Œì')
      isCoequalizer.œÄ‚Çå lem-10 = œÄ'
      isCoequalizer.equate-œÄ‚Çå lem-10 = equate-œÄ‚Çå'
      isCoequalizer.compute-Coeq lem-10 = lem-08
      isCoequalizer.isEpi:œÄ‚Çå lem-10 = lem-09

      lem-11 : hasCoequalizer _ _
      lem-11 = Œì' since (isCoequalizer:byFullyFaithfull lem-10)






