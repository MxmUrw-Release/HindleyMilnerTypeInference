
module Verification.Experimental.Theory.Std.Specific.MetaTermCalculus2.Instance.LogicalFramework where

open import Verification.Experimental.Conventions hiding (Structure ; _‚óÄ)
open import Verification.Experimental.Category.Std.Category.Definition
open import Verification.Experimental.Category.Std.Functor.Definition
open import Verification.Experimental.Data.Universe.Everything
open import Verification.Experimental.Algebra.Monoid.Definition
open import Verification.Experimental.Algebra.Monoid.Free
open import Verification.Experimental.Algebra.MonoidAction.Definition
open import Verification.Experimental.Order.Lattice
open import Verification.Experimental.Category.Std.Category.Structured.Monoidal.Definition
open import Verification.Experimental.Category.Std.Morphism.Iso
open import Verification.Experimental.Theory.Std.Specific.MetaTermCalculus2.Definition
open import Verification.Experimental.Theory.Std.Generic.TypeTheory.Simple
open import Verification.Experimental.Theory.Std.Generic.TypeTheory.Simple.Judgement2
open import Verification.Experimental.Theory.Std.Generic.TypeTheory.Definition
open import Verification.Experimental.Theory.Std.Generic.LogicalFramework.Definition
open import Verification.Experimental.Theory.Std.TypologicalTypeTheory.CwJ.Definition

module _ {ùíû : ùí∞ _} {{_ : ùíû is Category ùëñ}} where
  infixr 10 _‚ü∂‚ü®_‚ü©_
  _‚ü∂‚ü®_‚ü©_ : ‚àÄ(a : ùíû) {b c : ùíû} -> (œï : a ‚ü∂ b) -> (œà : b ‚ü∂ c ) -> a ‚ü∂ c
  _‚ü∂‚ü®_‚ü©_ _ œï œà = œï ‚óÜ œà

  _‚ü∂id : ‚àÄ(a : ùíû) -> a ‚ü∂ a
  _‚ü∂id a = id


private
  module _ {K : Kinding ùëñ‚ÇÅ} where
    U : CwJ K (ùëò , ùëñ‚ÇÅ , ùëó) -> MetaTermCalculus K ùëñ‚ÇÅ
    U ùíû = record {TermCon = JHom}



    F : ‚àÄ{ùëñ} -> MetaTermCalculus K ùëñ -> CwJ K _
    F Œ≥ = MTCCat Œ≥ since (isCwJ:MTCCat {Œ≥ = Œ≥})
      where open MTCDefinitions Œ≥



  i : ‚àÄ{K : Kinding ùëñ} {Œ≥ : MetaTermCalculus K (ùëñ)} -> ‚àÄ {‚Ñ≥} -> (Hom Œ≥ (U ‚Ñ≥)) -> (Hom (F Œ≥) ‚Ñ≥)
  i {Œ≥ = Œ≥} {‚Ñ≥} œï = f since isFunctor:f
    where
      instance
        _ : isSetoid ‚ü® ‚Ñ≥ ‚ü©
        _ = isSetoid:byCategory

      open MTCDefinitions Œ≥

      f : ‚ü® F Œ≥ ‚ü© -> ‚ü® ‚Ñ≥ ‚ü©
      f (incl x) = ‚ü¶ x ‚üß

      mutual
        -- map-f‚ÇÄ-var : ‚àÄ{ùîç Œî Œì Œ±} ->
        --         ùîç ‚ä©·∂†-var (Œì ‚à£ Œî ‚áí Œ±)
        --         -> Hom (‚ü¶ Œì ‚Ü∑ (ùîç ‚ãÜ Œî) ‚üß) (‚ü¶ Œì ‚Ü∑ Œ± ‚üß)
        -- map-f‚ÇÄ-var (suc x x‚ÇÅ) = {!!}
        -- map-f‚ÇÄ-var (zero {ùîç} {Œì} {Œ±} x) =
        --   let x' = map-f‚ÇÄ x
        --   in ‚ü¶ (Œì ‚ãÜ ‚¶ã Œ± ‚¶å) ‚Ü∑ (ùîç ‚ãÜ []) ‚üß    ‚ü∂‚ü® {!!} ‚ü©
        --      ‚ü¶ (Œì ‚ãÜ ‚¶ã Œ± ‚¶å) ‚Ü∑ ([] ‚ä¢ Œ±) ‚üß     ‚ü∂id

        map-f‚ÇÄ : ‚àÄ{ùîç Œî Œì Œ±} ->
                ùîç ‚ä©·∂† (Œì ‚à£ Œî ‚áí Œ±)
                -> Hom (‚ü¶ Œì ‚Ü∑ (ùîç ‚ãÜ Œî) ‚üß) (‚ü¶ Œì ‚Ü∑ Œ± ‚üß)
        map-f‚ÇÄ (meta {Œ±s} {Œ±}) = unit-r-‚äó

        map-f‚ÇÄ {ùîç} {Œî} {Œì} {Œ±} (app {ùîç‚ÇÄ} {ùîç‚ÇÅ} {ùîß = ùîß} t s) =
          let t' = map-f‚ÇÄ t
              s' = map-f‚ÇÄ s
          in {!!}
            -- ‚ü¶ Œì ‚Ü∑ (ùîç‚ÇÄ ‚ãÜ ùîç‚ÇÅ) ‚ãÜ Œî ‚üß                 ‚ü∂‚ü® {!!} ‚ü©
            -- ‚ü¶ Œì ‚Ü∑ (ùîç‚ÇÄ ‚ãÜ ùîç‚ÇÅ) ‚üß ‚äó ‚ü¶ Œì ‚Ü∑ Œî ‚üß        ‚ü∂‚ü® {!!} ‚ü©
            -- ‚ü¶ (Œì ‚Ü∑ ùîç‚ÇÄ) ‚ãÜ (Œì ‚Ü∑ ùîç‚ÇÅ) ‚üß ‚äó ‚ü¶ Œì ‚Ü∑ Œî ‚üß        ‚ü∂‚ü® {!!} ‚ü©
            -- ‚ü¶ Œì ‚Ü∑ ùîç‚ÇÄ ‚üß ‚äó ‚ü¶ Œì ‚Ü∑ ùîç‚ÇÅ ‚üß ‚äó ‚ü¶ Œì ‚Ü∑ Œî ‚üß        ‚ü∂‚ü® {!!} ‚ü©
            -- ‚ü¶ Œì ‚Ü∑ ùîç‚ÇÄ ‚üß ‚äó (‚ü¶ Œì ‚Ü∑ ùîç‚ÇÅ ‚üß ‚äó ‚óå) ‚äó ‚ü¶ Œì ‚Ü∑ Œî ‚üß        ‚ü∂‚ü® map-‚äó (map-‚äó id {!!}) id  ‚ü©
            -- ‚ü¶ Œì ‚Ü∑ ùîç‚ÇÄ ‚üß ‚äó (‚ü¶ Œì ‚Ü∑ ùîç‚ÇÅ ‚üß ‚äó ‚ü¶ Œì ‚Ü∑ [] ‚üß) ‚äó ‚ü¶ Œì ‚Ü∑ Œî ‚üß ‚ü∂‚ü® map-‚äó (map-‚äó id s') id  ‚ü©
            -- ‚ü¶ Œì ‚Ü∑ ùîç‚ÇÄ ‚üß ‚äó (‚ü¶ Œì ‚Ü∑ ùîß ‚üß                ) ‚äó ‚ü¶ Œì ‚Ü∑ Œî ‚üß        ‚ü∂‚ü® assoc-l-‚äó ‚ü©
            -- ‚ü¶ Œì ‚Ü∑ ùîç‚ÇÄ ‚üß ‚äó (‚ü¶ Œì ‚Ü∑ ùîß ‚üß ‚äó ‚ü¶ Œì ‚Ü∑ Œî ‚üß)        ‚ü∂‚ü® id ‚ü©
            -- ‚ü¶ Œì ‚Ü∑ ùîç‚ÇÄ ‚üß ‚äó (‚ü¶ (Œì ‚Ü∑ ùîß) ‚à∑ (Œì ‚Ü∑ Œî) ‚üß)        ‚ü∂‚ü® {!!} ‚ü©
            -- ‚ü¶ Œì ‚Ü∑ ùîç‚ÇÄ ‚üß ‚äó ‚ü¶ Œì ‚Ü∑ (ùîß ‚à∑ Œî) ‚üß          ‚ü∂‚ü® t' ‚ü©
            -- ‚ü¶ Œì ‚Ü∑ Œ± ‚üß                               ‚ü∂id

        map-f‚ÇÄ (con {Œì} {Œî} {Œ±} x) =
          let x' = ‚ü® œï ‚ü© x
          in ‚ü¶ Œì ‚Ü∑ Œî ‚üß   ‚ü∂‚ü® ‚ü® ‚ü¶‚Ü∑-ListJdg‚üß {Œî = Œî} ‚ü© ‚ü©
            Œì ‚Ü∑ ‚ü¶ Œî ‚üß   ‚ü∂‚ü® map x' ‚ü©
            Œì ‚Ü∑ ‚ü¶ Œ± ‚üß    ‚ü∂‚ü® ‚ü® ‚ü¶‚Ü∑-Jdg‚üß ‚Åª¬π ‚ü© ‚ü©
            ‚ü¶ Œì ‚Ü∑ Œ± ‚üß    ‚ü∂id

        map-f‚ÇÄ {ùîç} {Œî} {Œì} {Œ±} (lam {ùîç‚ÇÄ} {ùîç‚ÇÅ} {Œ± = Œ±'} {Œ±s = Œ±s'} {Œ≤} v x) =
          let x' = map-f‚ÇÄ x
              v' = map-f‚ÇÄ v
          in {!!}
            -- ‚ü¶ Œì ‚Ü∑ (ùîç‚ÇÄ ‚ãÜ ùîç‚ÇÅ) ‚ãÜ Œî ‚üß                 ‚ü∂‚ü® ? ‚ü©
            -- ‚ü¶ Œì ‚Ü∑ (ùîç‚ÇÄ ‚ãÜ ùîç‚ÇÅ) ‚üß ‚äó ‚ü¶ Œì ‚Ü∑ Œî ‚üß        ‚ü∂‚ü® {!!} ‚ü©
            -- ‚ü¶ (Œì ‚Ü∑ ùîç‚ÇÄ) ‚ãÜ (Œì ‚Ü∑ ùîç‚ÇÅ) ‚üß ‚äó ‚ü¶ Œì ‚Ü∑ Œî ‚üß        ‚ü∂‚ü® {!!} ‚ü©
            -- ‚ü¶ Œì ‚Ü∑ ùîç‚ÇÄ ‚üß ‚äó ‚ü¶ Œì ‚Ü∑ ùîç‚ÇÅ ‚üß ‚äó ‚ü¶ Œì ‚Ü∑ Œî ‚üß        ‚ü∂‚ü® {!!} ‚ü©
            -- ‚ü¶ Œì ‚Ü∑ ùîç‚ÇÄ ‚üß ‚äó ‚ü¶ (Œì ‚Ü∑ ùîç‚ÇÅ) ‚ãÜ (Œì ‚Ü∑ Œî) ‚üß        ‚ü∂‚ü® {!!} ‚ü©
            -- ‚ü¶ Œì ‚Ü∑ ùîç‚ÇÄ ‚üß ‚äó ‚ü¶ Œì ‚Ü∑ (ùîç‚ÇÅ ‚ãÜ Œî) ‚üß               ‚ü∂‚ü® {!!} ‚ü©
            -- (‚ü¶ Œì ‚Ü∑ ùîç‚ÇÄ ‚üß ‚äó ‚óå) ‚äó ‚ü¶ Œì ‚Ü∑ (ùîç‚ÇÅ ‚ãÜ Œî) ‚üß         ‚ü∂‚ü® id ‚ü©
            -- (‚ü¶ Œì ‚Ü∑ ùîç‚ÇÄ ‚üß ‚äó ‚ü¶ Œì ‚Ü∑ [] ‚üß) ‚äó ‚ü¶ Œì ‚Ü∑ (ùîç‚ÇÅ ‚ãÜ Œî) ‚üß  ‚ü∂‚ü® {!!} ‚ü©
            -- ‚ü¶(Œì ‚Ü∑ ([] ‚ä¢ ‚àÇ‚Çñ Œ±'))‚üß ‚äó ‚ü¶ Œì ‚Ü∑ (ùîç‚ÇÅ ‚ãÜ Œî) ‚üß         ‚ü∂‚ü® {!!} ‚ü©
            -- ‚ü¶(Œì ‚ä¢ ‚àÇ‚Çñ Œ±')‚üß         ‚äó (Œì ‚Ü∑ ‚ü¶ (ùîç‚ÇÅ ‚ãÜ Œî) ‚üß)       ‚ü∂‚ü® varSkip ‚ü©
            -- (Œì ‚ãÜ ‚¶ã Œ±' ‚¶å) ‚Ü∑ ‚ü¶ ùîç‚ÇÅ ‚ãÜ Œî ‚üß                        ‚ü∂‚ü® {!!} ‚ü©
            -- ‚ü¶ (Œì ‚ãÜ ‚¶ã Œ±' ‚¶å) ‚Ü∑ (ùîç‚ÇÅ ‚ãÜ Œî) ‚üß                        ‚ü∂‚ü® {!!} ‚ü©
            -- ‚ü¶ ((Œì ‚ãÜ ‚¶ã Œ±' ‚¶å) ‚Ü∑ ùîç‚ÇÅ) ‚ãÜ ((Œì ‚ãÜ ‚¶ã Œ±' ‚¶å) ‚Ü∑ Œî) ‚üß      ‚ü∂‚ü® {!!} ‚ü©
            -- ‚ü¶ ((Œì ‚ãÜ ‚¶ã Œ±' ‚¶å) ‚Ü∑ ùîç‚ÇÅ) ‚üß ‚äó ‚ü¶ ((Œì ‚ãÜ ‚¶ã Œ±' ‚¶å) ‚Ü∑ Œî) ‚üß  ‚ü∂‚ü® x' ‚ü©
            -- ‚ü¶ ((Œì ‚ãÜ ‚¶ã Œ±' ‚¶å) ‚Ü∑ (Œ±s' ‚ä¢ Œ≤)) ‚üß                     ‚ü∂‚ü® {!!} ‚ü©
            -- -- ‚ü¶ ((Œì ‚ãÜ ‚¶ã Œ±' ‚¶å) ‚Ü∑ (Œ±s' ‚Ü∑ ‚ä¶ Œ≤)) ‚üß                     ‚ü∂‚ü® {!!} ‚ü©
            -- -- ‚ü¶ (((Œì ‚ãÜ ‚¶ã Œ±' ‚¶å) ‚ãÜ Œ±s') ‚Ü∑ ‚ä¶ Œ≤) ‚üß                     ‚ü∂‚ü® {!!} ‚ü©
            -- ‚ü¶ Œì ‚Ü∑ ((Œ±' ‚à∑ Œ±s') ‚ä¢ Œ≤) ‚üß   ‚ü∂id
        map-f‚ÇÄ (var {Œì} {Œ±} x) =
          let x' = varProj x
          in ‚ü¶ Œì ‚Ü∑ [] ‚üß                  ‚ü∂‚ü® x' ‚ü©
             ‚ü¶ Œì ‚ä¢ Œ± ‚üß                    ‚ü∂‚ü® {!!} ‚ü©
             ‚ü¶ Œì ‚Ü∑ ([] ‚ä¢ Œ±) ‚üß            ‚ü∂id


      map-f : ‚àÄ{a b} ->
              Subs (MTCDefinitions._‚ä©·∂†'_ Œ≥) ‚ü® a ‚ü© ‚ü® b ‚ü©
              -> Hom (f a) (f b)
      map-f {incl .‚¶ã‚¶å} {incl .‚¶ã‚¶å} [] = id
      map-f {incl .(Œì ‚ãÜ Œì')} {incl .(_ ‚à∑ _)} (_‚à∑_ {Œì} {Œì'} x s) = {!!}

      isFunctor:f : isFunctor ‚Ä≤ ‚ü® F Œ≥ ‚ü© ‚Ä≤ ‚Ä≤ ‚ü® ‚Ñ≥ ‚ü© ‚Ä≤ f
      isFunctor.map isFunctor:f = map-f
      isFunctor.isSetoidHom:map isFunctor:f = {!!}
      isFunctor.functoriality-id isFunctor:f = {!!}
      isFunctor.functoriality-‚óÜ isFunctor:f = {!!}

module _ {K : Kinding ùëñ‚ÇÅ} where
  instance
    isLogicalFramework:MTC : isLogicalFramework (CwJ K (_ , _ , _)) (MTC K _) -- (MTC (ùëô , (ùëñ ‚äî ùëô)))
    isLogicalFramework.LFTerm (isLogicalFramework:MTC) = F
    isLogicalFramework.LFSig isLogicalFramework:MTC = U
    isLogicalFramework.isFunctor:LFTerm isLogicalFramework:MTC = {!!}
    isLogicalFramework.isFunctor:LFSig isLogicalFramework:MTC = {!!}
    isLogicalFramework.interp isLogicalFramework:MTC {Œ≥} {‚Ñ≥} = i {Œ≥ = Œ≥} {‚Ñ≥ = ‚Ñ≥}

    -- where
    --   f : ‚ü® F Œ≥ ‚ü© -> ‚ü® ‚Ñ≥ ‚ü©
    --   f (incl x) = rec-Ctx-‚¶ø JObj x -- (Œª ùîß -> JObj (map-Jdg-‚¶ø ‚ü® œï ‚ü© ùîß)) x
    {-

      open MTCDefinitions Œ≥

      mutual
        -- map-f‚ÇÄ-var : ‚àÄ{a b} ->
        --         (_‚ä©·∂†‚Üì_)
        --         -- (map-Ctx-‚¶ø (Œª ùîß -> map-Jdg-‚¶ø kind ùîß ‚óÄ main) ‚ü® a ‚ü©)
        --         (map-Ctx-‚¶ø (map-Jdg-‚¶ø kind) ‚ü® a ‚ü©)
        --         ((map-Jdg-‚¶ø kind) b ‚óÄ var) ‚Üí
        --         Hom (f a) (f (incl ([] ,, b)))

        map-f‚ÇÄ-var : ‚àÄ{a b œÑ Œ± Œ§} ->
                (_‚ä©·∂†‚Üì_)
                (map-Ctx-‚¶ø (map-Jdg-‚¶ø kind) ‚ü® a ‚ü©)
                ((map-Ctx-‚¶ø kind) b ‚ä¢ Œ± ‚óÄ var) ‚Üí
                (‚ü¶ Œ§ ‚ä© œÑ ‚üß-R ‚â£ Œ±) ->
                Hom (f a) (f (incl ([] ,, b ‚Ü∑ œÑ)))

        map-f‚ÇÄ-var {a} {[]} (getapp ())
        map-f‚ÇÄ-var {a} {(G ,, x)} (MTCDefinitions.getapp ())
        map-f‚ÇÄ-var {a} {(G ,, x)} {[] ‚ä¢ œÑ} {Œ±} {Œ§} (suc te te2) p =
          let y1 = map-f‚ÇÄ {œÑ = [] ‚ä¢ ‚àÇ‚Çñ x} te refl-‚â£
              y2 = map-f‚ÇÄ-var {œÑ = [] ‚ä¢ œÑ} {Œ§ = Œ§} te2 p
          in diag ‚óÜ (map-‚äó (y1 ‚óÜ unit-l-‚äó) (y2 ‚óÜ unit-l-‚äó) ‚óÜ varSkip ‚óÜ unit-l-‚äó-‚Åª¬π)
        map-f‚ÇÄ-var {a} {(G ,, x)} {œÑ ‚ä¢ œÑ'} {Œ±} {Œ§} (suc te te2) p = {!!}
        map-f‚ÇÄ-var {a} {(G ,, x)} {œÑ} {Œ±} {Œ§} (zero te) p with arrify-R-kind {Œì = Œ§} {œÑ = œÑ} p
        ... | refl-‚â£ , refl-‚â£ =
          let y1 = map-f‚ÇÄ {œÑ = [] ‚ä¢ ‚àÇ‚Çñ x} te refl-‚â£
          in y1 ‚óÜ map-‚äó id (varTake {Œì = G} {a = x})


        map-f‚ÇÄ-app : ‚àÄ{a b œÑ Œ± Œ§} ->
                (_‚ä©·∂†‚Üì-app_)
                (map-Ctx-‚¶ø (map-Jdg-‚¶ø kind) ‚ü® a ‚ü©)
                -- (map-Ctx-‚¶ø (Œª ùîß -> map-Jdg-‚¶ø kind ùîß ‚óÄ main) ‚ü® a ‚ü©)
                ((map-Ctx-‚¶ø kind) b ‚ä¢ Œ± ‚óÄ main) ‚Üí
                (‚ü¶ Œ§ ‚ä© œÑ ‚üß-R ‚â£ Œ±) ->
                Hom (f a) (f (incl ([] ,, b ‚Ü∑ œÑ)))
        map-f‚ÇÄ-app {a} {b} {G ‚ä¢ t} {Œ±} {Œ§} (MTCDefinitions.app {_} {Œ±‚ÇÅ} {ùîß} q x y) p =
          let t1 = map-f‚ÇÄ-app {_} {_} {(G) ‚ä¢ t} {_} {Œ§ = ([] ,, ùîß) ‚ãÜ Œ§} x {!!}
              t2 = map-f‚ÇÄ {_} {_} {ùîß} y q
              -- t2 = map-f‚ÇÄ {_} {_} {[] ‚ä¢ Œ±‚ÇÅ} y refl-‚â£
          in {!!}
        map-f‚ÇÄ-app {a} {b} {œÑ} {Œ±} {Œ§} (var x) p = map-f‚ÇÄ-var {a} {b} {œÑ} {Œ±} {Œ§} x p
        map-f‚ÇÄ-app {a} {b} (con {_} {ts ‚ä© t} x x‚ÇÅ) p = {!!}
        map-f‚ÇÄ-app {a} {b} (meta x) p = {!!}

        -- assign-r : Ctx-‚¶ø K

        map-f‚ÇÄ : ‚àÄ{a b œÑ Œ±} ->
                (_‚ä©·∂†‚Üì_)
                (map-Ctx-‚¶ø (map-Jdg-‚¶ø kind) ‚ü® a ‚ü©)
                -- ((map-Jdg-‚¶ø kind) b ‚óÄ main) ‚Üí
                ((map-Ctx-‚¶ø kind) b ‚ä¢ Œ± ‚óÄ main) ‚Üí
                (‚ü¶ œÑ ‚üß-J ‚â£ Œ±) ->
                Hom (f a) (f (incl ([] ,, b ‚Ü∑ œÑ)))
        map-f‚ÇÄ {a} {b} {G ‚ä¢ t} {(Œ± ‚áí Œ≤)} (MTCDefinitions.lam x) p with arrify-J-split {G} p
        ... | Œì' , Œ±' , (refl-‚â£ , refl-‚â£) , r = let y = map-f‚ÇÄ {œÑ = Œì' ‚ä¢ t} x r
                                                in y ‚óÜ {!!}
        map-f‚ÇÄ {a} {b} {G ‚ä¢ t} {.(kind _)} (MTCDefinitions.getapp x) p with arrify-J-kind {G} p
        ... | (refl-‚â£ , refl-‚â£) = map-f‚ÇÄ-app {Œ§ = []} x p


        -- map-f‚ÇÄ {a} {b} (getapp x) = map-f‚ÇÄ-app x
      -- map-f‚ÇÄ {a} {([] ‚ä¢ Œ±)} (getapp x) = {!!}
      -- map-f‚ÇÄ {a} {((Œì ,, Œ≤) ‚ä¢ Œ±)} (getapp x) = {!!}
      -- map-f‚ÇÄ {a} {((Œì ,, Œ≤) ‚ä¢ Œ±) ‚óÄ var} (t) = map-f‚ÇÄ-var t
      -- map-f‚ÇÄ {a} {((Œì ,, Œ≤) ‚ä¢ .Œ≤) ‚óÄ .var} (zero (getapp (meta x))) = {!!}

      map-f : ‚àÄ{a b} ->
              Sub-‚¶ø (MTCDefinitions._‚ä©·∂†‚Üì'_ Œ≥)
              -- (map-Ctx-‚¶ø (Œª ùîß -> map-Jdg-‚¶ø kind ùîß ‚óÄ main) ‚ü® a ‚ü©)
              -- (map-Ctx-‚¶ø (Œª ùîß -> map-Jdg-‚¶ø kind ùîß ‚óÄ main) ‚ü® b ‚ü©) ->
              (map-Ctx-‚¶ø (map-Jdg-‚¶ø kind) ‚ü® a ‚ü©)
              (map-Ctx-‚¶ø (map-Jdg-‚¶ø kind) ‚ü® b ‚ü©) ‚Üí
              Hom (f a) (f b)
      map-f = {!!}

      isFunctor:f : isFunctor ‚Ä≤ ‚ü® F Œ≥ ‚ü© ‚Ä≤ ‚Ä≤ ‚ü® ‚Ñ≥ ‚ü© ‚Ä≤ f
      isFunctor.map isFunctor:f = map-f
      isFunctor.isSetoidHom:map isFunctor:f = {!!}
      isFunctor.functoriality-id isFunctor:f = {!!}
      isFunctor.functoriality-‚óÜ isFunctor:f = {!!}
      -}



{-
{-

-- instance
--   isCategory:MetaTermCalculus : isCategory (‚Ñì‚ÇÄ , ‚Ñì‚ÇÄ) (MetaTermCalculus)
--   isCategory.Hom' isCategory:MetaTermCalculus = {!!}
--   isCategory.isSetoid:Hom isCategory:MetaTermCalculus = {!!}
--   isCategory.id isCategory:MetaTermCalculus = {!!}
--   isCategory._‚óÜ_ isCategory:MetaTermCalculus = {!!}
--   isCategory.unit-l-‚óÜ isCategory:MetaTermCalculus = {!!}
--   isCategory.unit-r-‚óÜ isCategory:MetaTermCalculus = {!!}
--   isCategory.unit-2-‚óÜ isCategory:MetaTermCalculus = {!!}
--   isCategory.assoc-l-‚óÜ isCategory:MetaTermCalculus = {!!}
--   isCategory.assoc-r-‚óÜ isCategory:MetaTermCalculus = {!!}
--   isCategory._‚óà_ isCategory:MetaTermCalculus = {!!}

-- macro
--   ùêåùêìùêÇ = #structureOn MetaTermCalculus


-- instance
--   isLogicalFramework:MetaTermCalculus : isLogicalFramework (ùêåùê®ùêßùêÇùêöùê≠ _) ùêåùêìùêÇ
--   isLogicalFramework.Term isLogicalFramework:MetaTermCalculus = {!!}
--   isLogicalFramework.Sig isLogicalFramework:MetaTermCalculus = {!!}
--   isLogicalFramework.isFunctor:Term isLogicalFramework:MetaTermCalculus = {!!}
--   isLogicalFramework.isFunctor:Sig isLogicalFramework:MetaTermCalculus = {!!}
--   isLogicalFramework.‚ü¶ isLogicalFramework:MetaTermCalculus ‚üß = {!!}


-}
-}
