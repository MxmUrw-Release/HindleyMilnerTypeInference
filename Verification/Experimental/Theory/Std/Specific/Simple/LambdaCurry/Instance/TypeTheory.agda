
module Verification.Experimental.Theory.Std.Specific.Simple.LambdaCurry.Instance.TypeTheory where

open import Verification.Experimental.Conventions
open import Verification.Experimental.Set.Setoid
open import Verification.Experimental.Set.Discrete
open import Verification.Experimental.Set.Decidable
open import Verification.Experimental.Category.Std.Category.Definition
open import Verification.Experimental.Data.Universe.Instance.Category
-- open import Verification.Experimental.Theory.Std.Presentation.Signature.SingleSorted.Definition
open import Verification.Experimental.Theory.Std.Specific.Simple.LambdaCurry.Definition as Curry
open import Verification.Experimental.Theory.Std.Specific.Simple.LambdaCurry.Definition using (_РѕХ_Ріб_)
open import Verification.Experimental.Theory.Std.TypeTheory.Definition
open import Verification.Experimental.Computation.Question.Definition
open import Verification.Experimental.Computation.Question.Specific.Small

open import Verification.Experimental.Category.Std.Fibration.BaseChange.Definition
open import Verification.Experimental.Category.Std.Fibration.Definition
open import Verification.Experimental.Category.Std.Fibration.Instance.BaseChange

open import Verification.Experimental.Category.Std.Limit.Specific.Pullback
open import Verification.Experimental.Category.Std.Fibration.Specific.Fam.Definition
open import Verification.Experimental.Data.Universe.Everything

private
  instance
    ╬╗Curry : isTypeTheory _ Рђ▓ Curry.Statement Рђ▓
    isTypeTheory.Termрхў ╬╗Curry = Curry.Term-╬╗
    isTypeTheory.isSetoid:Term ╬╗Curry = it
    isTypeTheory._РѕХ_ ╬╗Curry = ╬╗ t (_ , ╬Њ Ріб ¤ё) -> t РѕХ ╬Њ Ріб ¤ё
    isTypeTheory.preserveType ╬╗Curry (incl refl-StrId) t = t


macro
  ­ЮЪЎ : Рѕђ{­ЮЉќ} -> SomeStructure
  ­ЮЪЎ {­ЮЉќ} = #structureOn (Ріц-­Юњ░ {­ЮЉќ})

private
  f : Ріц-­Юњ░ РЪХ TypeTheory _
  f = incl (const Рђ▓ Curry.Statement Рђ▓)

zeta : Fiber _ Ріц-­Юњ░
zeta = РЪе f *! РЪЕ (­ЮљЊ­ЮљЊFib _)

private macro
  p = instance[ "" , ­ЮЉќ / 3 ] (­ЮљЁ­Юљџ­Юљд (­Юљљ­Юљ«­Юљъ­Юљг­ЮљГ (­ЮЉќ Рїё 0 РІ» 1)) (­ЮЉќ Рїё 2) -> ­ЮљЊ­Юљ▓­ЮљЕ­Юљъ _) РЌђ

trivialF : Рѕђ{­ЮЉќ} -> Рѕђ{A} -> Fiber (p {­ЮЉќ}) A
trivialF {A = A} = (A since family (╬╗ _ -> TRIVIAL))
           since record { isSectionFiber = refl }

module _ {A : ­Юњ░ _} B (¤ђ : A -> p {­ЮЉќ} B) where
  Solution : ­Юњ░ _
  Solution = РЪе incl ¤ђ *! РЪЕ Рђ▓ B Рђ▓ РЪХ trivialF

record SolvedTypeTheoryClass ­ЮЉќ : ­Юњ░ (­ЮЉќ РЂ║ РЂ║) where
  field Param : ­Юњ░ _
  field theory : Param -> TypeTheory ­ЮЉќ
  field solution : Solution (­ЮљЊ­ЮљЊFam ­ЮЉќ) theory

open SolvedTypeTheoryClass public

checkClass : (­ЮЊБ : SolvedTypeTheoryClass ­ЮЉќ) -> (p : Param ­ЮЊБ) -> (t : Term {{of theory ­ЮЊБ p}}) -> (¤ё : РЪе theory ­ЮЊБ p РЪЕ) -> isDecidable (_РѕХ_ {{of theory ­ЮЊБ p}} t ¤ё)
checkClass ­ЮЊБ p t =
  let X = map-Рќа {{of РЪе РЪе РЪе solution ­ЮЊБ РЪЕ РЪЕ РЪЕ}}
  in {!!}


-- (­ЮљЊ­ЮљЊFam _ since record { isSectionFiber = refl })


  -- (obj (­ЮљЊ­ЮљЊFam _))

  -- g : Ріц-­Юњ░ РЪХ ­Юљљ­Юљ«­Юљъ­Юљг­ЮљГ _
  -- g = {!!}







