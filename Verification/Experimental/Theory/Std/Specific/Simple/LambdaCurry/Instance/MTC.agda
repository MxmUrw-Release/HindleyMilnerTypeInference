
module Verification.Experimental.Theory.Std.Specific.Simple.LambdaCurry.Instance.MTC where

open import Verification.Experimental.Conventions
open import Verification.Experimental.Set.Setoid
open import Verification.Experimental.Set.Discrete
open import Verification.Experimental.Set.Decidable
open import Verification.Experimental.Data.Fin.Definition
open import Verification.Experimental.Category.Std.Category.Definition
open import Verification.Experimental.Data.Universe.Instance.Category
-- open import Verification.Experimental.Theory.Std.Presentation.Signature.SingleSorted.Definition
import Verification.Experimental.Theory.Std.Specific.Simple.LambdaCurry.Definition as Œõ
open import Verification.Experimental.Theory.Std.Specific.Simple.LambdaCurry.Definition hiding (_‚áí_)
open import Verification.Experimental.Theory.Std.Specific.MetaTermCalculus.Definition
open import Verification.Experimental.Theory.Std.TypeTheory.Definition


module Œõ-Curry where

  data Kind : ùí∞‚ÇÄ where
    Te : Kind
    VarSuc : Kind
    VarZero : Kind

  data isGood' : Type' Kind -> ‚Ñï -> ùí∞‚ÇÄ where
    zero : ‚àÄ {k} -> isGood' (kind k) 0
    suc : ‚àÄ{k œÑ} -> isGood' œÑ n -> isGood' (kind k ‚áí œÑ) (suc n)

  isGood : Type' Kind -> ùí∞‚ÇÄ
  isGood œÑ = ‚àë isGood' œÑ
  -- Good = const ùüô-ùí∞
  postulate
    GApp : isGood (kind Te ‚áí (kind Te ‚áí kind Te))
    GLam : isGood ((kind Te ‚áí kind Te) ‚áí kind Te)
    GAll : ‚àÄ{œÑ} -> isGood œÑ

  data TermCon : (œÑ : Type' Kind) -> isGood œÑ ‚Üí ùí∞‚ÇÄ where
    App : TermCon (kind Te ‚áí (kind Te ‚áí kind Te)) GApp
    Lam : TermCon ((kind Te ‚áí kind Te) ‚áí kind Te) GLam
    Suc : TermCon (kind Te ‚áí kind Te) GAll
    Zero : TermCon (kind Te) GAll
    Rec-‚Ñï : TermCon ((kind Te ‚áí kind Te) ‚áí kind Te ‚áí kind Te ‚áí kind Te) GAll

  data isHidden : (ùîß : MetaJ Kind) -> ùí∞‚ÇÄ where
    varsuc : ‚àÄ{Œì} -> isHidden (Œì ‚ä¢ kind VarSuc ‚óÄ special)
    varzero : ‚àÄ{Œì} -> isHidden (Œì ‚ä¢ kind VarZero ‚óÄ special)

  œÉ : MTC.Signature
  œÉ = record { MetaKind = Kind ; varsuc = VarSuc ; varzero = VarZero ; isGoodType = isGood ; isHiddenMeta = isHidden ; TermCon = TermCon }

  open MTC.Definitions œÉ

  TyToTy-‚®Ø : ‚Ñï -> Type' Kind
  TyToTy-‚®Ø zero = kind Te
  TyToTy-‚®Ø (suc n) = kind Te ‚áí TyToTy-‚®Ø n

  TyToCtx-‚®Ø : ‚Ñï -> SCtx (Type' Kind)
  TyToCtx-‚®Ø zero = []
  TyToCtx-‚®Ø (suc n) = TyToCtx-‚®Ø n ,, kind Te

  infixl 8 _$$_
  pattern _$$_ a b = app a b




  mutual
    TermFromTerm-‚®Ø-var : ‚àÄ{n} -> [] ‚ä©‚Üì (TyToCtx-‚®Ø n ‚ä¢ kind Te ‚óÄ var) -> ùîΩ ≥ n
    TermFromTerm-‚®Ø-var {zero} (getapp (meta (skip ())))
    TermFromTerm-‚®Ø-var {zero} (getapp (meta (give ())))
    TermFromTerm-‚®Ø-var {suc n} (suc tep te) = suc (TermFromTerm-‚®Ø-var te)
    TermFromTerm-‚®Ø-var {suc n} (zero te) = zero
    TermFromTerm-‚®Ø-var {suc n} (getapp (meta (skip ())))
    TermFromTerm-‚®Ø-var {suc n} (getapp (meta (give ())))

    TermFromTerm-‚®Ø-var-‚ä• : ‚àÄ{n Œ± Œ≤} -> [] ‚ä©‚Üì (TyToCtx-‚®Ø n ‚ä¢ (Œ± ‚áí Œ≤) ‚óÄ var) -> ùüò-ùí∞
    TermFromTerm-‚®Ø-var-‚ä• {suc n} (suc tep te) = TermFromTerm-‚®Ø-var-‚ä• te

    TermFromTerm-‚®Ø-app-‚ä• : ‚àÄ{n Œ±‚ÇÅ Œ±‚ÇÇ Œ±‚ÇÉ Œ±‚ÇÑ Œ±‚ÇÖ Œ≤} -> [] ‚ä©‚Üì-app (TyToCtx-‚®Ø n ‚ä¢ (Œ±‚ÇÅ ‚áí Œ±‚ÇÇ ‚áí Œ±‚ÇÉ ‚áí Œ±‚ÇÑ ‚áí Œ±‚ÇÖ ‚áí Œ≤) ‚óÄ main) -> ùüò-ùí∞
    TermFromTerm-‚®Ø-app-‚ä• (app te x) = TermFromTerm-‚®Ø-app-‚ä• te
    TermFromTerm-‚®Ø-app-‚ä• (var te) = TermFromTerm-‚®Ø-var-‚ä• te
    TermFromTerm-‚®Ø-app-‚ä• (meta (skip ()))
    TermFromTerm-‚®Ø-app-‚ä• (meta (give ()))

    TermFromTerm-‚®Ø-app : ‚àÄ{n} -> [] ‚ä©‚Üì-app (TyToCtx-‚®Ø n ‚ä¢ kind Te ‚óÄ main) -> Œõ.Term-Œª n
    TermFromTerm-‚®Ø-app (app (app (app (app (app te x‚ÇÑ) x‚ÇÉ) x‚ÇÇ) x‚ÇÅ) x) = ùüò-rec (TermFromTerm-‚®Ø-app-‚ä• te)
    TermFromTerm-‚®Ø-app (app (app (app (app (var te) x‚ÇÉ) x‚ÇÇ) x‚ÇÅ) x) = ùüò-rec $ TermFromTerm-‚®Ø-var-‚ä• te
    TermFromTerm-‚®Ø-app (app (app (app (app (meta (skip ())) x‚ÇÉ) x‚ÇÇ) x‚ÇÅ) y)
    TermFromTerm-‚®Ø-app (app (app (app (app (meta (give ())) x‚ÇÉ) x‚ÇÇ) x‚ÇÅ) y)
    TermFromTerm-‚®Ø-app (app (app (app (var te) x‚ÇÇ) x‚ÇÅ) x) = ùüò-rec $ TermFromTerm-‚®Ø-var-‚ä• te
    TermFromTerm-‚®Ø-app (app (app (app (con Rec-‚Ñï) (lam te-suc)) te-zero) te-v) = rec-‚Ñï (TermFromTerm-‚®Ø te-suc) (TermFromTerm-‚®Ø te-zero) (TermFromTerm-‚®Ø te-v)
    TermFromTerm-‚®Ø-app (app (app (app (meta (skip ())) x‚ÇÇ) x‚ÇÅ) x)
    TermFromTerm-‚®Ø-app (app (app (app (meta (give ())) x‚ÇÇ) x‚ÇÅ) x)
    TermFromTerm-‚®Ø-app (app (app (var te) x‚ÇÅ) x) = ùüò-rec $ TermFromTerm-‚®Ø-var-‚ä• te
    TermFromTerm-‚®Ø-app (app (app (con App) x) y) = app (TermFromTerm-‚®Ø x) (TermFromTerm-‚®Ø y)
    TermFromTerm-‚®Ø-app (app (app (meta (skip ())) x‚ÇÅ) x)
    TermFromTerm-‚®Ø-app (app (app (meta (give ())) x‚ÇÅ) x)
    TermFromTerm-‚®Ø-app (app (var te) x) = ùüò-rec $ TermFromTerm-‚®Ø-var-‚ä• te
    TermFromTerm-‚®Ø-app (app (con Lam) (lam x)) = lam (TermFromTerm-‚®Ø x)
    TermFromTerm-‚®Ø-app (app (con Suc) x) = suc (TermFromTerm-‚®Ø x)
    TermFromTerm-‚®Ø-app (app (meta (skip ())) x)
    TermFromTerm-‚®Ø-app (app (meta (give ())) x)
    TermFromTerm-‚®Ø-app (var x) = var (TermFromTerm-‚®Ø-var x)
    TermFromTerm-‚®Ø-app (con Zero) = zero
    TermFromTerm-‚®Ø-app (meta (skip ()))
    TermFromTerm-‚®Ø-app (meta (give ()))

    TermFromTerm-‚®Ø : ‚àÄ{n} -> [] ‚ä©‚Üì (TyToCtx-‚®Ø n ‚ä¢ kind Te ‚óÄ main) -> Œõ.Term-Œª n
    TermFromTerm-‚®Ø (getapp x) = TermFromTerm-‚®Ø-app x



  TermToTerm-‚®Ø-var : {n : ‚Ñï} -> ùîΩ ≥ n -> [] ‚ä©‚Üì (TyToCtx-‚®Ø n ‚ä¢ kind Te ‚óÄ var)
  TermToTerm-‚®Ø-var zero = zero (getapp (meta (skip varzero)))
  TermToTerm-‚®Ø-var (suc i) = suc (getapp (meta (skip varsuc))) (TermToTerm-‚®Ø-var i)

  TermToTerm-‚®Ø : ‚àÄ{n} -> Œõ.Term-Œª n -> [] ‚ä©‚Üì (TyToCtx-‚®Ø n ‚ä¢ kind Te ‚óÄ main)
  TermToTerm-‚®Ø (app te te2) = getapp ((con App) $$ (TermToTerm-‚®Ø te) $$ (TermToTerm-‚®Ø te2))
  TermToTerm-‚®Ø (lam te) = getapp ((con Lam) $$ (lam (TermToTerm-‚®Ø te)))
  TermToTerm-‚®Ø (var x) = getapp (var (TermToTerm-‚®Ø-var x))
  TermToTerm-‚®Ø (zero) = getapp (con Zero)
  TermToTerm-‚®Ø (suc te) = getapp $ (con Suc) $$ (TermToTerm-‚®Ø te)
  TermToTerm-‚®Ø (rec-‚Ñï te-suc te-zero v) = getapp $ con Rec-‚Ñï $$ (lam (TermToTerm-‚®Ø te-suc)) $$ TermToTerm-‚®Ø te-zero $$ TermToTerm-‚®Ø v

  iso-left-var : ‚àÄ{n} -> (i : ùîΩ ≥ n) -> TermFromTerm-‚®Ø-var (TermToTerm-‚®Ø-var i) ‚â° i
  iso-left-var {.(suc _)} zero = refl
  iso-left-var {.(suc _)} (suc i) = Œª k -> suc (iso-left-var i k)

  iso-left : ‚àÄ{n} -> (te : Term-Œª n) -> TermFromTerm-‚®Ø (TermToTerm-‚®Ø te) ‚â° te
  iso-left (te $$ te2) = Œª i -> iso-left te i $$ iso-left te2 i
  iso-left (lam te) = Œª i -> lam (iso-left te i)
  iso-left (var x) = Œª k -> var (iso-left-var x k)
  iso-left zero = refl
  iso-left (suc te) = cong suc (iso-left te)
  iso-left (rec-‚Ñï te te1 te2) = Œª i -> rec-‚Ñï (iso-left te i) (iso-left te1 i) (iso-left te2 i)


  œâ : Term-Œª 0
  œâ = app (lam (app (var zero) (var zero))) (lam (app (var zero) (var zero)))




  -- TermFromTerm-‚®Ø (MTC.var t) = {!!}
  -- TermFromTerm-‚®Ø (MTC.app (MTC.var t) t‚ÇÅ) = {!!}
  -- TermFromTerm-‚®Ø (MTC.app (MTC.con Lam) t‚ÇÅ) = lam {!!}
  -- TermFromTerm-‚®Ø (MTC.app (MTC.lam t) t‚ÇÅ) = {!!}
  -- TermFromTerm-‚®Ø (MTC.app (MTC.app t t‚ÇÇ) t‚ÇÅ) = {!!}
  -- TermFromTerm-‚®Ø (MTC.var (MTC.meta ()))
  -- TermFromTerm-‚®Ø (MTC.app (MTC.var (MTC.meta ())) t‚ÇÅ)
  -- TermFromTerm-‚®Ø (MTC.app (MTC.lam (MTC.var t)) t‚ÇÅ) = {!!}
  -- TermFromTerm-‚®Ø (MTC.app (MTC.lam (MTC.app (MTC.var t) t‚ÇÇ)) t‚ÇÅ) = {!!}
  -- TermFromTerm-‚®Ø (MTC.app (MTC.lam (MTC.app (MTC.lam t) t‚ÇÇ)) t‚ÇÅ) = {!!}
  -- TermFromTerm-‚®Ø (MTC.app (MTC.lam (MTC.app (MTC.app t t‚ÇÉ) t‚ÇÇ)) t‚ÇÅ) = {!!}
  -- TermFromTerm-‚®Ø (MTC.app (MTC.app t t‚ÇÇ) t‚ÇÅ) = {!!}




